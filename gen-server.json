{
  "variables": [
    "module",
    "path",
    "server"
  ],
  "id": "gen-server",
  "entities": [
    {
      "type": "directory",
      "path": "${path}",
      "children": [
        {
          "type": "directory",
          "path": "${path}/${server}",
          "children": [
            {
              "type": "file",
              "path": "${path}/${server}/Types.purs",
              "content": "module ${module}.Types\n  ( Message(..)\n  , ServerType'\n  , Pid\n  , State\n  , Arguments\n  ) where\n\nimport Prelude\n\nimport Pinto.GenServer (ServerPid, ServerType)\n\ndata Message = NoOp\n\ntype State = { count :: Int }\n\ntype Arguments = { initialCount :: Int }\n\ntype ServerType' = ServerType Unit Unit Message State\ntype Pid = ServerPid Unit Unit Message State\n"
            }
          ]
        },
        {
          "type": "file",
          "path": "${path}/${server}.purs",
          "content": "module ${module}\n  ( startLink\n  , increment\n  , currentCount\n  ) where\n\nimport Prelude\n\nimport Data.Maybe (Maybe(..))\nimport Effect (Effect)\nimport Erl.Atom as Atom\nimport Pinto (RegistryName(..), RegistryReference(..), StartLinkResult)\nimport Pinto.GenServer (CallFn, CastFn, InfoFn, InitFn, InitResult(..), ServerSpec)\nimport Pinto.GenServer as GenServer\nimport ${module}.Types (Arguments, Message(..), ServerType', State, Pid)\n\nserverName :: RegistryName ServerType'\nserverName = \"${module}\" # Atom.atom # Local\n\nstartLink :: Arguments -> Effect (StartLinkResult Pid)\nstartLink arguments = do\n  arguments # spec # GenServer.startLink\n\nspec :: Arguments -> ServerSpec Unit Unit Message State\nspec arguments =\n  (arguments # init # GenServer.defaultSpec) { name = Just serverName, handleInfo = Just handleInfo }\n\ninit :: Arguments -> InitFn Unit Unit Message State\ninit { initialCount } = { count: initialCount } # InitOk # pure\n\nincrement :: Effect Unit\nincrement = GenServer.cast (ByName serverName) handleIncrement\n\ncurrentCount :: Effect Int\ncurrentCount = GenServer.call (ByName serverName) handleCurrentCount\n\nhandleIncrement :: CastFn Unit Unit Message State\nhandleIncrement state = do\n  state { count = state.count + 1 } # GenServer.return # pure\n\nhandleCurrentCount :: CallFn Int Unit Unit Message State\nhandleCurrentCount _from state = do\n  state # GenServer.reply state.count # pure\n\nhandleInfo :: InfoFn Unit Unit Message State\nhandleInfo NoOp state = state # GenServer.return # pure\n"
        }
      ]
    }
  ],
  "description": "A basic GenServer"
}
