{
  "variables": [
    "camel",
    "kebab",
    "pascal",
    "snake"
  ],
  "id": "basic-purerl-elixir",
  "entities": [
    {
      "type": "directory",
      "path": "${kebab}",
      "children": [
        {
          "type": "file",
          "path": "${kebab}/.gitignore",
          "content": ".spago\n.psc-ide-port\ndeps\nebin\noutput\n.elixir_ls\n_build\n"
        },
        {
          "type": "file",
          "path": "${kebab}/.skapareignore",
          "content": ".spago$\noutput$\ndeps$\n.elixir_ls$\n.psc-ide-port$\nebin$\n_build$\n.git$\n"
        },
        {
          "type": "file",
          "path": "${kebab}/.tool-versions",
          "content": "purescript 0.15.7\nspago 0.20.9\npurerl 0.0.19\n"
        },
        {
          "type": "file",
          "path": "${kebab}/README.md",
          "content": "# ${kebab}\n\nA description of the project.\n\nMade with [`purerl`](https://github.com/purerl/purerl).\n"
        },
        {
          "type": "file",
          "path": "${kebab}/mix.exs",
          "content": "defmodule ${pascal}.MixProject do\n  use Mix.Project\n\n  def project do\n    [\n      app: :${snake},\n      version: \"0.1.0\",\n      elixir: \"~> 1.14\",\n      start_permanent: Mix.env() == :prod,\n      build_embedded: Mix.env() == :prod,\n      deps: deps(),\n      compilers: [:purerl | Mix.compilers()],\n      erlc_paths: [\"output\"]\n    ]\n  end\n\n  # Run \"mix help compile.app\" to learn about applications.\n  def application do\n    [\n      mod: {:${camel}_application@ps, []},\n      extra_applications: [:logger]\n    ]\n  end\n\n  # Run \"mix help deps\" to learn about dependencies.\n  defp deps do\n    [\n      # {:dep_from_hexpm, \"~> 0.3.0\"},\n      # {:dep_from_git, git: \"https://github.com/elixir-lang/my_dep.git\", tag: \"0.1.0\"}\n      {:purerlex, \"~> 0.4.2\"},\n      {:jsx, \"~> 3.1\"},\n      {:gproc, \"~> 0.9.0\"}\n    ]\n  end\nend\n"
        },
        {
          "type": "file",
          "path": "${kebab}/mix.lock",
          "content": "%{\n  \"cowboy\": {:hex, :cowboy, \"2.9.0\", \"865dd8b6607e14cf03282e10e934023a1bd8be6f6bacf921a7e2a96d800cd452\", [:make, :rebar3], [{:cowlib, \"2.11.0\", [hex: :cowlib, repo: \"hexpm\", optional: false]}, {:ranch, \"1.8.0\", [hex: :ranch, repo: \"hexpm\", optional: false]}], \"hexpm\", \"2c729f934b4e1aa149aff882f57c6372c15399a20d54f65c8d67bef583021bde\"},\n  \"cowlib\": {:hex, :cowlib, \"2.11.0\", \"0b9ff9c346629256c42ebe1eeb769a83c6cb771a6ee5960bd110ab0b9b872063\", [:make, :rebar3], [], \"hexpm\", \"2b3e9da0b21c4565751a6d4901c20d1b4cc25cbb7fd50d91d2ab6dd287bc86a9\"},\n  \"gproc\": {:hex, :gproc, \"0.9.0\", \"853ccb7805e9ada25d227a157ba966f7b34508f386a3e7e21992b1b484230699\", [:rebar3], [], \"hexpm\", \"587e8af698ccd3504cf4ba8d90f893ede2b0f58cabb8a916e2bf9321de3cf10b\"},\n  \"jsx\": {:hex, :jsx, \"3.1.0\", \"d12516baa0bb23a59bb35dccaf02a1bd08243fcbb9efe24f2d9d056ccff71268\", [:rebar3], [], \"hexpm\", \"0c5cc8fdc11b53cc25cf65ac6705ad39e54ecc56d1c22e4adb8f5a53fb9427f3\"},\n  \"purerlex\": {:hex, :purerlex, \"0.4.2\", \"96e8a6988f5b4e91e713cc5c04f5f768f46fd39539f7dc61c8182f439669c31d\", [:mix], [], \"hexpm\", \"303d02b8f29199612cacdecbd6aca7c27b9423f94d6982c6bac56bc326e24103\"},\n  \"ranch\": {:hex, :ranch, \"1.8.0\", \"8c7a100a139fd57f17327b6413e4167ac559fbc04ca7448e9be9057311597a1d\", [:make, :rebar3], [], \"hexpm\", \"49fbcfd3682fab1f5d109351b61257676da1a2fdbe295904176d5e521a2ddfe5\"},\n}\n"
        },
        {
          "type": "file",
          "path": "${kebab}/packages.dhall",
          "content": "{-\nWelcome to your new Dhall package-set!\n\nBelow are instructions for how to edit this file for most use\ncases, so that you don't need to know Dhall to use it.\n\n## Use Cases\n\nMost will want to do one or both of these options:\n1. Override/Patch a package's dependency\n2. Add a package not already in the default package set\n\nThis file will continue to work whether you use one or both options.\nInstructions for each option are explained below.\n\n### Overriding/Patching a package\n\nPurpose:\n- Change a package's dependency to a newer/older release than the\n    default package set's release\n- Use your own modified version of some dependency that may\n    include new API, changed API, removed API by\n    using your custom git repo of the library rather than\n    the package set's repo\n\nSyntax:\nwhere `entityName` is one of the following:\n- dependencies\n- repo\n- version\n-------------------------------\nlet upstream = --\nin  upstream\n  with packageName.entityName = \"new value\"\n-------------------------------\n\nExample:\n-------------------------------\nlet upstream = --\nin  upstream\n  with halogen.version = \"master\"\n  with halogen.repo = \"https://example.com/path/to/git/repo.git\"\n\n  with halogen-vdom.version = \"v4.0.0\"\n  with halogen-vdom.dependencies = [ \"extra-dependency\" ] # halogen-vdom.dependencies\n-------------------------------\n\n### Additions\n\nPurpose:\n- Add packages that aren't already included in the default package set\n\nSyntax:\nwhere `<version>` is:\n- a tag (i.e. \"v4.0.0\")\n- a branch (i.e. \"master\")\n- commit hash (i.e. \"701f3e44aafb1a6459281714858fadf2c4c2a977\")\n-------------------------------\nlet upstream = --\nin  upstream\n  with new-package-name =\n    { dependencies =\n       [ \"dependency1\"\n       , \"dependency2\"\n       ]\n    , repo =\n       \"https://example.com/path/to/git/repo.git\"\n    , version =\n        \"<version>\"\n    }\n-------------------------------\n\nExample:\n-------------------------------\nlet upstream = --\nin  upstream\n  with benchotron =\n      { dependencies =\n          [ \"arrays\"\n          , \"exists\"\n          , \"profunctor\"\n          , \"strings\"\n          , \"quickcheck\"\n          , \"lcg\"\n          , \"transformers\"\n          , \"foldable-traversable\"\n          , \"exceptions\"\n          , \"node-fs\"\n          , \"node-buffer\"\n          , \"node-readline\"\n          , \"datetime\"\n          , \"now\"\n          ]\n      , repo =\n          \"https://github.com/hdgarrood/purescript-benchotron.git\"\n      , version =\n          \"v7.0.0\"\n      }\n-------------------------------\n-}\nlet upstream =\n      https://github.com/purerl/package-sets/releases/download/erl-0.15.3-20220629/packages.dhall sha256:48ee9f3558c00e234eae6b8f23b4b8b66eb9715c7f2154864e1e425042a0723b\n\nlet erl-quickcheck-helpers =\n      https://raw.githubusercontent.com/quanterall/purescript-erl-quickcheck-helpers/v0.0.4/spago.dhall\n        sha256:df6abef567d04b64cef1dd714d1e872d7e7800cf89a9a2184fbb35ccb3c65468\n\nlet overrides =\n      { erl-quickcheck-helpers =\n        { repo =\n            \"https://github.com/quanterall/purescript-erl-quickcheck-helpers.git\"\n        , version = \"v0.0.4\"\n        , dependencies = erl-quickcheck-helpers.dependencies\n        },\n        erl-simplebus =\n        { dependencies = upstream.erl-simplebus.dependencies\n        , repo = \"https://github.com/id3as/purescript-erl-simplebus.git\"\n        , version = \"551cb2e110f70bf470825d0912c06c48e71867bc\"\n        }\n      }\n\nin  upstream // overrides\n"
        },
        {
          "type": "file",
          "path": "${kebab}/spago.dhall",
          "content": "{-\nWelcome to a Spago project!\nYou can edit this file as you like.\n\nNeed help? See the following resources:\n- Spago documentation: https://github.com/purescript/spago\n- Dhall language tour: https://docs.dhall-lang.org/tutorials/Language-Tour.html\n\nWhen creating a new Spago project, you can use\n`spago init --no-comments` or `spago init -C`\nto generate this file without the comments in this block.\n-}\n{ name = \"${kebab}\"\n, dependencies =\n  [ \"arrays\"\n  , \"assert\"\n  , \"bifunctors\"\n  , \"console\"\n  , \"datetime\"\n  , \"debug\"\n  , \"effect\"\n  , \"either\"\n  , \"erl-atom\"\n  , \"erl-binary\"\n  , \"erl-kernel\"\n  , \"erl-lists\"\n  , \"erl-logger\"\n  , \"erl-maps\"\n  , \"erl-pinto\"\n  , \"erl-process\"\n  , \"erl-quickcheck-helpers\"\n  , \"erl-simplebus\"\n  , \"erl-test-eunit\"\n  , \"erl-tuples\"\n  , \"exceptions\"\n  , \"foldable-traversable\"\n  , \"foreign\"\n  , \"free\"\n  , \"heterogeneous\"\n  , \"lists\"\n  , \"maybe\"\n  , \"newtype\"\n  , \"ordered-collections\"\n  , \"partial\"\n  , \"prelude\"\n  , \"quickcheck\"\n  , \"record\"\n  , \"simple-json\"\n  , \"simple-json-generics\"\n  , \"strings\"\n  , \"transformers\"\n  , \"tuples\"\n  , \"typelevel-prelude\"\n  , \"unicode\"\n  , \"unsafe-coerce\"\n  ]\n, packages = ./packages.dhall\n, sources = [ \"src/**/*.purs\", \"test/**/*.purs\" ]\n, backend = \"purerl\"\n}\n"
        },
        {
          "type": "directory",
          "path": "${kebab}/src",
          "children": [
            {
              "type": "directory",
              "path": "${kebab}/src/Pinto",
              "children": [
                {
                  "type": "directory",
                  "path": "${kebab}/src/Pinto/GenServer",
                  "children": [
                    {
                      "type": "file",
                      "path": "${kebab}/src/Pinto/GenServer/Helpers.erl",
                      "content": "-module(pinto_genServer_helpers@foreign).\n\n-export([exit_/2]).\n\nexit_(Name0, Reason) ->\n  Name = translate_name(Name0),\n  fun() -> gen_server:stop(Name, Reason, timer:seconds(5)) end.\n\ntranslate_name({local, Name}) ->\n  Name;\ntranslate_name(Name) ->\n  Name.\n"
                    },
                    {
                      "type": "file",
                      "path": "${kebab}/src/Pinto/GenServer/Helpers.purs",
                      "content": "module Pinto.GenServer.Helpers\n  ( exit\n  ) where\n\nimport Prelude\n\nimport Effect (Effect)\nimport Erl.Atom (Atom)\nimport Erl.Process (Process)\n\nexit :: forall process. Process process -> Atom -> Effect Unit\nexit = exit_\n\nforeign import exit_ :: forall p. Process p -> Atom -> Effect Unit\n"
                    }
                  ]
                },
                {
                  "type": "directory",
                  "path": "${kebab}/src/Pinto/Supervisor",
                  "children": [
                    {
                      "type": "file",
                      "path": "${kebab}/src/Pinto/Supervisor/Helpers.purs",
                      "content": "module Pinto.Supervisor.Helpers\n  ( supervisor\n  , worker\n  ) where\n\nimport Prelude\n\nimport Data.Time.Duration (Milliseconds(..))\nimport Effect (Effect)\nimport Erl.Process.Raw (class HasPid)\nimport Pinto.Supervisor\n  ( ChildShutdownTimeoutStrategy(..)\n  , ChildType(..)\n  , ErlChildSpec\n  , RestartStrategy(..)\n  )\nimport Pinto.Supervisor as Supervisor\nimport Pinto.Types (StartLinkResult)\n\nsupervisor\n  :: forall childProcess\n   . HasPid childProcess\n  => String\n  -> Effect (StartLinkResult childProcess)\n  -> ErlChildSpec\nsupervisor id start =\n  Supervisor.spec\n    { id\n    , childType: Supervisor\n    , start\n    , restartStrategy: RestartTransient\n    , shutdownStrategy: ShutdownTimeout $ Milliseconds 5000.0\n    }\n\nworker\n  :: forall childProcess\n   . HasPid childProcess\n  => String\n  -> Effect (StartLinkResult childProcess)\n  -> ErlChildSpec\nworker id start =\n  Supervisor.spec\n    { id\n    , childType: Worker\n    , start\n    , restartStrategy: RestartTransient\n    , shutdownStrategy: ShutdownTimeout $ Milliseconds 5000.0\n    }\n"
                    }
                  ]
                }
              ]
            },
            {
              "type": "directory",
              "path": "${kebab}/src/${pascal}",
              "children": [
                {
                  "type": "file",
                  "path": "${kebab}/src/${pascal}/Application.purs",
                  "content": "module ${pascal}.Application where\n\nimport ${pascal}.Supervisor as ${pascal}Supervisor\nimport Effect.Uncurried (EffectFn2)\nimport Erl.Atom (Atom)\nimport Erl.Data.List as ErlList\nimport Foreign (Foreign)\nimport Pinto.App as Application\n\nstart :: forall args. EffectFn2 Atom (ErlList.List args) Foreign\nstart = Application.simpleStart ${pascal}Supervisor.startLink\n"
                },
                {
                  "type": "file",
                  "path": "${kebab}/src/${pascal}/Supervisor.purs",
                  "content": "module ${pascal}.Supervisor\n  ( startLink\n  ) where\n\nimport Prelude\n\nimport Data.Maybe (Maybe(..))\nimport Data.Time.Duration (Seconds(..))\nimport Effect (Effect)\nimport Erl.Atom (atom)\nimport Erl.Data.List as ErlList\nimport Pinto.Supervisor (SupervisorPid)\nimport Pinto.Supervisor as Supervisor\nimport Pinto.Types (RegistryName(..), StartLinkResult)\n\nstartLink :: Effect (StartLinkResult SupervisorPid)\nstartLink = Supervisor.startLink (Just $ Local $ atom supervisorName) $ pure supervisorSpec\n  where\n  supervisorSpec = { childSpecs, flags }\n  supervisorName = \"${pascal}.Supervisor\"\n  childSpecs = ErlList.fromFoldable []\n  flags = { strategy, intensity, period }\n  strategy = Supervisor.OneForOne\n  intensity = 3\n  period = Seconds 5.0\n\n"
                }
              ]
            }
          ]
        },
        {
          "type": "directory",
          "path": "${kebab}/test",
          "children": [
            {
              "type": "file",
              "path": "${kebab}/test/Main.purs",
              "content": "module Test.Main\n  ( main\n  ) where\n\nimport Prelude\n\nimport Effect (Effect)\nimport Erl.Test.EUnit (suite, test)\nimport Erl.Test.EUnit as EUnit\nimport Test.Assert (assertEqual)\nimport Test.QuickCheck ((===))\nimport Test.QuickCheck.Helpers (property)\n\nmain :: Effect Unit\nmain = do\n  void $ EUnit.runTests do\n    suite \"Test suite\" do\n      test \"tests things\" do\n        assertEqual { expected: 1, actual: 1 }\n\n        property \"All numbers are equal to themselves\" \\(x :: Int) ->\n          x === x\n"
            },
            {
              "type": "file",
              "path": "${kebab}/test/chatterbox_test.exs",
              "content": "defmodule ChatterboxTest do\n  use ExUnit.Case\n  doctest Chatterbox\n\n  test \"greets the world\" do\n    assert Chatterbox.hello() == :world\n  end\nend\n"
            },
            {
              "type": "file",
              "path": "${kebab}/test/test_helper.exs",
              "content": "ExUnit.start()\n"
            }
          ]
        }
      ]
    }
  ],
  "description": "A basic PureScript (purerl) application template"
}
