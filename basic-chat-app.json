{
  "variables": [
    "pascalName",
    "snakeName"
  ],
  "id": "basic-chat-app",
  "entities": [
    {
      "type": "directory",
      "path": "${snakeName}",
      "children": [
        {
          "type": "file",
          "path": "${snakeName}/.dockerignore",
          "content": "**/output\nserver/_build\n.elixir_ls\nserver/.spago\nserver/deps\n"
        },
        {
          "type": "file",
          "path": "${snakeName}/.skapareignore",
          "content": ".elixir_ls\n.git\n"
        },
        {
          "type": "directory",
          "path": "${snakeName}/Common",
          "children": [
            {
              "type": "file",
              "path": "${snakeName}/Common/Types.purs",
              "content": "module ${pascalName}.Common.Types\n  ( ServerMessage(..)\n  , ClientMessage(..)\n  , User(..)\n  , Channel(..)\n  , UserEvent(..)\n  , ChannelEvent(..)\n  , Event(..)\n  ) where\n\nimport Prelude\n\nimport Data.Generic.Rep (class Generic)\nimport Data.Newtype (class Newtype)\nimport Foreign (ForeignError(..), fail)\nimport Simple.JSON (class ReadForeign, class WriteForeign, readImpl, writeImpl)\n\ndata UserEvent = ConnectSuccess\n\nderive instance genericUserEvent :: Generic UserEvent _\nderive instance eqUserEvent :: Eq UserEvent\nderive instance ordUserEvent :: Ord UserEvent\n\ninstance showUserEvent :: Show UserEvent where\n  show ConnectSuccess = \"ConnectSuccess\"\n\ninstance readForeignUserEvent :: ReadForeign UserEvent where\n  readImpl f = do\n    HasTypeField { type: t } <- readImpl f\n    case t of\n      \"ConnectSuccess\" -> pure ConnectSuccess\n      _ -> fail $ ForeignError $ \"Invalid tag for UserEvent: \" <> t\n\ninstance writeForeignUserEvent :: WriteForeign UserEvent where\n  writeImpl ConnectSuccess = writeImpl { type: \"ConnectSuccess\" }\n\ndata ChannelEvent\n  = ChannelJoined { channel :: Channel, user :: User }\n  | ChannelLeft { channel :: Channel, user :: User }\n  | ChannelMessageSent { channel :: Channel, user :: User, message :: String }\n  | UserRenamed { oldName :: User, newName :: User }\n\nderive instance genericChannelEvent :: Generic ChannelEvent _\nderive instance eqChannelEvent :: Eq ChannelEvent\nderive instance ordChannelEvent :: Ord ChannelEvent\n\ninstance showChannelEvent :: Show ChannelEvent where\n  show (ChannelJoined r) = \"ChannelJoined \" <> show r\n  show (ChannelLeft r) = \"ChannelLeft \" <> show r\n  show (ChannelMessageSent r) = \"ChannelMessageSent \" <> show r\n  show (UserRenamed r) = \"UserRenamed \" <> show r\n\ninstance readForeignChannelEvent :: ReadForeign ChannelEvent where\n  readImpl f = do\n    HasTypeField { type: t } <- readImpl f\n    case t of\n      \"ChannelJoined\" -> ChannelJoined <$> readImpl f\n      \"ChannelLeft\" -> ChannelLeft <$> readImpl f\n      \"ChannelMessageSent\" -> ChannelMessageSent <$> readImpl f\n      \"UserRenamed\" -> UserRenamed <$> readImpl f\n      _ -> fail $ ForeignError $ \"Invalid tag for ChannelEvent: \" <> t\n\ninstance writeForeignChannelEvent :: WriteForeign ChannelEvent where\n  writeImpl (ChannelJoined { channel, user }) = writeImpl { type: \"ChannelJoined\", channel, user }\n  writeImpl (ChannelLeft { channel, user }) = writeImpl { type: \"ChannelLeft\", channel, user }\n  writeImpl (ChannelMessageSent { channel, user, message }) =\n    writeImpl { type: \"ChannelMessageSent\", channel, user, message }\n  writeImpl (UserRenamed { oldName, newName }) = writeImpl { type: \"UserRenamed\", oldName, newName }\n\nnewtype User = User String\n\nderive newtype instance eqUser :: Eq User\nderive newtype instance ordUser :: Ord User\nderive instance genericUser :: Generic User _\nderive instance newtypeUser :: Newtype User _\n\ninstance showUser :: Show User where\n  show (User u) = \"User \" <> u\n\ninstance readForeignUser :: ReadForeign User where\n  readImpl f = User <$> readImpl f\n\ninstance writeForeignUser :: WriteForeign User where\n  writeImpl (User s) = writeImpl s\n\nnewtype Channel = Channel String\n\nderive newtype instance eqChannel :: Eq Channel\nderive newtype instance ordChannel :: Ord Channel\nderive instance genericChannel :: Generic Channel _\nderive instance newtypeChannel :: Newtype Channel _\n\ninstance showChannel :: Show Channel where\n  show (Channel u) = \"Channel \" <> u\n\ninstance readForeignChannel :: ReadForeign Channel where\n  readImpl f = Channel <$> readImpl f\n\ninstance writeForeignChannel :: WriteForeign Channel where\n  writeImpl (Channel s) = writeImpl s\n\ndata Event\n  = UserJoined { username :: String, channel :: String }\n  | UserLeft { username :: String, channel :: String }\n\nderive instance genericEvent :: Generic Event _\nderive instance eqEvent :: Eq Event\n\ninstance writeForeignEvent :: WriteForeign Event where\n  writeImpl (UserJoined { username, channel }) = writeImpl { type: \"UserJoined\", username, channel }\n  writeImpl (UserLeft { username, channel }) = writeImpl { type: \"UserLeft\", username, channel }\n\ninstance readForeignEvent :: ReadForeign Event where\n  readImpl f = do\n    HasTypeField { type: t } <- readImpl f\n    case t of\n      \"UserJoined\" -> UserJoined <$> readImpl f\n      \"UserLeft\" -> UserLeft <$> readImpl f\n      _ -> fail $ ForeignError $ \"Unknown event type: \" <> t\n\ninstance showEvent :: Show Event where\n  show (UserJoined r) = \"UserJoined \" <> show r\n  show (UserLeft r) = \"UserLeft \" <> show r\n\ndata ServerMessage\n  = SendPing\n  | UserMessage { event :: UserEvent }\n  | ChannelMessage { channel :: Channel, event :: ChannelEvent }\n\nderive instance genericServerMessage :: Generic ServerMessage _\nderive instance eqServerMessage :: Eq ServerMessage\n\ninstance showServerMessage :: Show ServerMessage where\n  show SendPing = \"SendPing\"\n  show (UserMessage r) = \"UserMessage \" <> show r\n  show (ChannelMessage r) = \"ChannelMessage \" <> show r\n\ninstance writeForeignServerMessage :: WriteForeign ServerMessage where\n  writeImpl SendPing = writeImpl { type: \"SendPing\" }\n  writeImpl (UserMessage { event }) = writeImpl { type: \"UserMessage\", event }\n  writeImpl (ChannelMessage { channel, event }) =\n    writeImpl { type: \"ChannelMessage\", channel, event }\n\ninstance readForeignServerMessage :: ReadForeign ServerMessage where\n  readImpl f = do\n    HasTypeField { type: t } <- readImpl f\n    case t of\n      \"SendPing\" -> pure SendPing\n      \"UserMessage\" -> UserMessage <$> readImpl f\n      \"ChannelMessage\" -> ChannelMessage <$> readImpl f\n      _ -> fail $ ForeignError $ \"Unknown type: \" <> t\n\nnewtype HasTypeField = HasTypeField { type :: String }\n\nderive instance newtypeHasTypeField :: Newtype HasTypeField _\n\ninstance readForeignHasTypeField :: ReadForeign HasTypeField where\n  readImpl f = HasTypeField <$> readImpl f\n\ndata ClientMessage\n  = SetUsername { user :: User }\n  | SendMessage { channel :: Channel, message :: String }\n  | JoinChannel { user :: User, channel :: Channel }\n  | LeaveChannel { user :: User, channel :: Channel }\n\nderive instance genericClientMessage :: Generic ClientMessage _\nderive instance eqClientMessage :: Eq ClientMessage\n\ninstance showClientMessage :: Show ClientMessage where\n  show (SetUsername r) = \"SetUsername \" <> show r\n  show (SendMessage r) = \"SendMessage \" <> show r\n  show (JoinChannel r) = \"JoinChannel \" <> show r\n  show (LeaveChannel r) = \"LeaveChannel \" <> show r\n\ninstance writeForeignClientMessage :: WriteForeign ClientMessage where\n  writeImpl (SetUsername { user }) = writeImpl { type: \"SetUsername\", user }\n  writeImpl (SendMessage { channel, message }) = writeImpl { type: \"SendMessage\", channel, message }\n  writeImpl (JoinChannel { user, channel }) = writeImpl { type: \"JoinChannel\", user, channel }\n  writeImpl (LeaveChannel { user, channel }) = writeImpl { type: \"LeaveChannel\", user, channel }\n\ninstance readForeignClientMessage :: ReadForeign ClientMessage where\n  readImpl f = do\n    HasTypeField { type: t } <- readImpl f\n    case t of\n      \"SetUsername\" -> SetUsername <$> readImpl f\n      \"SendMessage\" -> SendMessage <$> readImpl f\n      \"JoinChannel\" -> JoinChannel <$> readImpl f\n      \"LeaveChannel\" -> LeaveChannel <$> readImpl f\n      _ -> fail $ ForeignError $ \"Unknown type: \" <> t\n"
            }
          ]
        },
        {
          "type": "file",
          "path": "${snakeName}/Dockerfile",
          "content": "FROM ubuntu:20.04 as build\n\nSHELL [\"/bin/bash\", \"-c\"]\n\nRUN apt-get update && \\\n    apt-get install -y \\\n           unzip git curl wget gcc make autoconf automake build-essential \\\n           libncurses5-dev libssl-dev locales\n\nENV LANG en_US.UTF-8  \nENV LANGUAGE en_US:en  \nENV LC_ALL en_US.UTF-8     \nRUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && \\\n    locale-gen\n\nCOPY . /app\n\nWORKDIR /app/server\n\n# Install asdf for version management\nRUN git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.11.1 && \\\n    echo -e '\\n. $HOME/.asdf/asdf.sh' >> ~/.bashrc\n\nRUN . $HOME/.asdf/asdf.sh && \\\n    asdf plugin add erlang && \\\n    asdf plugin add elixir && \\\n    asdf plugin add purescript && \\\n    asdf plugin add spago && \\\n    asdf plugin add purerl && \\\n    asdf plugin add rebar && \\\n    asdf plugin add nodejs && \\\n    asdf install erlang && \\\n    asdf global erlang 25.1.2 && \\\n    asdf install rebar && \\\n    asdf install purescript && \\\n    asdf install spago && \\\n    asdf install purerl && \\\n    asdf install elixir && \\\n    asdf install nodejs\n\nRUN . $HOME/.asdf/asdf.sh && npm install --global esbuild\n\nWORKDIR /app/client\n\nRUN . $HOME/.asdf/asdf.sh && spago bundle-app --to ../server/priv/static/app.js\n\nWORKDIR /app/server\n\nRUN . $HOME/.asdf/asdf.sh && \\\n    mix local.hex --force && \\\n    mix local.rebar --force && \\\n    MIX_ENV=prod mix deps.get && \\\n    MIX_ENV=prod mix compile && \\\n    MIX_ENV=prod mix release\n\nRUN ls -lsa\n\n# Release image\n\nFROM ubuntu:20.04 as release\n\nRUN apt-get update && apt-get install -y unzip git curl wget linux-libc-dev-amd64-cross locales\n\nCOPY --from=build /app/server/_build/prod/rel/${snakeName} /app\nCOPY --from=build /app/server/priv /app/static\n\nRUN ls -lsa /app\n\nWORKDIR /app\n\nCMD [\"bin/${snakeName}\", \"start\"]\n"
        },
        {
          "type": "directory",
          "path": "${snakeName}/client",
          "children": [
            {
              "type": "file",
              "path": "${snakeName}/client/.gitignore",
              "content": "/bower_components/\n/node_modules/\n/.pulp-cache/\n/output/\n/generated-docs/\n/.psc-package/\n/.psc*\n/.purs*\n/.psa*\n/.spago\n"
            },
            {
              "type": "file",
              "path": "${snakeName}/client/.psc-ide-port",
              "content": "15921"
            },
            {
              "type": "file",
              "path": "${snakeName}/client/.skapareignore",
              "content": ".psci_modules\n.spago\noutput\n.purs-repl\n"
            },
            {
              "type": "file",
              "path": "${snakeName}/client/.tool-versions",
              "content": "erlang 25.1.2\nelixir 1.14.2-otp-25\npurescript 0.15.3\nspago 0.20.9\npurerl 0.0.17\nrebar 3.20.0\nnodejs 17.9.1\n"
            },
            {
              "type": "file",
              "path": "${snakeName}/client/package-lock.json",
              "content": "{\n  \"name\": \"client\",\n  \"version\": \"1.0.0\",\n  \"lockfileVersion\": 2,\n  \"requires\": true,\n  \"packages\": {\n    \"\": {\n      \"name\": \"client\",\n      \"version\": \"1.0.0\",\n      \"license\": \"ISC\",\n      \"devDependencies\": {\n        \"esbuild\": \"^0.17.4\"\n      }\n    },\n    \"node_modules/@esbuild/android-arm\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.17.4.tgz\",\n      \"integrity\": \"sha512-R9GCe2xl2XDSc2XbQB63mFiFXHIVkOP+ltIxICKXqUPrFX97z6Z7vONCLQM1pSOLGqfLrGi3B7nbhxmFY/fomg==\",\n      \"cpu\": [\n        \"arm\"\n      ],\n      \"dev\": true,\n      \"optional\": true,\n      \"os\": [\n        \"android\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/android-arm64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.17.4.tgz\",\n      \"integrity\": \"sha512-91VwDrl4EpxBCiG6h2LZZEkuNvVZYJkv2T9gyLG/mhGG1qrM7i5SwUcg/hlSPnL/4hDT0TFcF35/XMGSn0bemg==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"dev\": true,\n      \"optional\": true,\n      \"os\": [\n        \"android\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/android-x64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.17.4.tgz\",\n      \"integrity\": \"sha512-mGSqhEPL7029XL7QHNPxPs15JVa02hvZvysUcyMP9UXdGFwncl2WU0bqx+Ysgzd+WAbv8rfNa73QveOxAnAM2w==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"dev\": true,\n      \"optional\": true,\n      \"os\": [\n        \"android\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/darwin-arm64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.17.4.tgz\",\n      \"integrity\": \"sha512-tTyJRM9dHvlMPt1KrBFVB5OW1kXOsRNvAPtbzoKazd5RhD5/wKlXk1qR2MpaZRYwf4WDMadt0Pv0GwxB41CVow==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"dev\": true,\n      \"optional\": true,\n      \"os\": [\n        \"darwin\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/darwin-x64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.17.4.tgz\",\n      \"integrity\": \"sha512-phQuC2Imrb3TjOJwLN8EO50nb2FHe8Ew0OwgZDH1SV6asIPGudnwTQtighDF2EAYlXChLoMJwqjAp4vAaACq6w==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"dev\": true,\n      \"optional\": true,\n      \"os\": [\n        \"darwin\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/freebsd-arm64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.17.4.tgz\",\n      \"integrity\": \"sha512-oH6JUZkocgmjzzYaP5juERLpJQSwazdjZrTPgLRmAU2bzJ688x0vfMB/WTv4r58RiecdHvXOPC46VtsMy/mepg==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"dev\": true,\n      \"optional\": true,\n      \"os\": [\n        \"freebsd\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/freebsd-x64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.17.4.tgz\",\n      \"integrity\": \"sha512-U4iWGn/9TrAfpAdfd56eO0pRxIgb0a8Wj9jClrhT8hvZnOnS4dfMPW7o4fn15D/KqoiVYHRm43jjBaTt3g/2KA==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"dev\": true,\n      \"optional\": true,\n      \"os\": [\n        \"freebsd\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-arm\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.17.4.tgz\",\n      \"integrity\": \"sha512-S2s9xWTGMTa/fG5EyMGDeL0wrWVgOSQcNddJWgu6rG1NCSXJHs76ZP9AsxjB3f2nZow9fWOyApklIgiTGZKhiw==\",\n      \"cpu\": [\n        \"arm\"\n      ],\n      \"dev\": true,\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-arm64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.17.4.tgz\",\n      \"integrity\": \"sha512-UkGfQvYlwOaeYJzZG4cLV0hCASzQZnKNktRXUo3/BMZvdau40AOz9GzmGA063n1piq6VrFFh43apRDQx8hMP2w==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"dev\": true,\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-ia32\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.17.4.tgz\",\n      \"integrity\": \"sha512-3lqFi4VFo/Vwvn77FZXeLd0ctolIJH/uXkH3yNgEk89Eh6D3XXAC9/iTPEzeEpsNE5IqGIsFa5Z0iPeOh25IyA==\",\n      \"cpu\": [\n        \"ia32\"\n      ],\n      \"dev\": true,\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-loong64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.17.4.tgz\",\n      \"integrity\": \"sha512-HqpWZkVslDHIwdQ9D+gk7NuAulgQvRxF9no54ut/M55KEb3mi7sQS3GwpPJzSyzzP0UkjQVN7/tbk88/CaX4EQ==\",\n      \"cpu\": [\n        \"loong64\"\n      ],\n      \"dev\": true,\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-mips64el\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.17.4.tgz\",\n      \"integrity\": \"sha512-d/nMCKKh/SVDbqR9ju+b78vOr0tNXtfBjcp5vfHONCCOAL9ad8gN9dC/u+UnH939pz7wO+0u/x9y1MaZcb/lKA==\",\n      \"cpu\": [\n        \"mips64el\"\n      ],\n      \"dev\": true,\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-ppc64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.17.4.tgz\",\n      \"integrity\": \"sha512-lOD9p2dmjZcNiTU+sGe9Nn6G3aYw3k0HBJies1PU0j5IGfp6tdKOQ6mzfACRFCqXjnBuTqK7eTYpwx09O5LLfg==\",\n      \"cpu\": [\n        \"ppc64\"\n      ],\n      \"dev\": true,\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-riscv64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.17.4.tgz\",\n      \"integrity\": \"sha512-mTGnwWwVshAjGsd8rP+K6583cPDgxOunsqqldEYij7T5/ysluMHKqUIT4TJHfrDFadUwrghAL6QjER4FeqQXoA==\",\n      \"cpu\": [\n        \"riscv64\"\n      ],\n      \"dev\": true,\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-s390x\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.17.4.tgz\",\n      \"integrity\": \"sha512-AQYuUGp50XM29/N/dehADxvc2bUqDcoqrVuijop1Wv72SyxT6dDB9wjUxuPZm2HwIM876UoNNBMVd+iX/UTKVQ==\",\n      \"cpu\": [\n        \"s390x\"\n      ],\n      \"dev\": true,\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/linux-x64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.17.4.tgz\",\n      \"integrity\": \"sha512-+AsFBwKgQuhV2shfGgA9YloxLDVjXgUEWZum7glR5lLmV94IThu/u2JZGxTgjYby6kyXEx8lKOqP5rTEVBR0Rw==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"dev\": true,\n      \"optional\": true,\n      \"os\": [\n        \"linux\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/netbsd-x64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.17.4.tgz\",\n      \"integrity\": \"sha512-zD1TKYX9553OiLS/qkXPMlWoELYkH/VkzRYNKEU+GwFiqkq0SuxsKnsCg5UCdxN3cqd+1KZ8SS3R+WG/Hxy2jQ==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"dev\": true,\n      \"optional\": true,\n      \"os\": [\n        \"netbsd\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/openbsd-x64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.17.4.tgz\",\n      \"integrity\": \"sha512-PY1NjEsLRhPEFFg1AV0/4Or/gR+q2dOb9s5rXcPuCjyHRzbt8vnHJl3vYj+641TgWZzTFmSUnZbzs1zwTzjeqw==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"dev\": true,\n      \"optional\": true,\n      \"os\": [\n        \"openbsd\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/sunos-x64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.17.4.tgz\",\n      \"integrity\": \"sha512-B3Z7s8QZQW9tKGleMRXvVmwwLPAUoDCHs4WZ2ElVMWiortLJFowU1NjAhXOKjDgC7o9ByeVcwyOlJ+F2r6ZgmQ==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"dev\": true,\n      \"optional\": true,\n      \"os\": [\n        \"sunos\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/win32-arm64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.17.4.tgz\",\n      \"integrity\": \"sha512-0HCu8R3mY/H5V7N6kdlsJkvrT591bO/oRZy8ztF1dhgNU5xD5tAh5bKByT1UjTGjp/VVBsl1PDQ3L18SfvtnBQ==\",\n      \"cpu\": [\n        \"arm64\"\n      ],\n      \"dev\": true,\n      \"optional\": true,\n      \"os\": [\n        \"win32\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/win32-ia32\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.17.4.tgz\",\n      \"integrity\": \"sha512-VUjhVDQycse1gLbe06pC/uaA0M+piQXJpdpNdhg8sPmeIZZqu5xPoGWVCmcsOO2gaM2cywuTYTHkXRozo3/Nkg==\",\n      \"cpu\": [\n        \"ia32\"\n      ],\n      \"dev\": true,\n      \"optional\": true,\n      \"os\": [\n        \"win32\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/@esbuild/win32-x64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.17.4.tgz\",\n      \"integrity\": \"sha512-0kLAjs+xN5OjhTt/aUA6t48SfENSCKgGPfExADYTOo/UCn0ivxos9/anUVeSfg+L+2O9xkFxvJXIJfG+Q4sYSg==\",\n      \"cpu\": [\n        \"x64\"\n      ],\n      \"dev\": true,\n      \"optional\": true,\n      \"os\": [\n        \"win32\"\n      ],\n      \"engines\": {\n        \"node\": \">=12\"\n      }\n    },\n    \"node_modules/esbuild\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/esbuild/-/esbuild-0.17.4.tgz\",\n      \"integrity\": \"sha512-zBn9MeCwT7W5F1a3lXClD61ip6vQM+H8Msb0w8zMT4ZKBpDg+rFAraNyWCDelB/2L6M3g6AXHPnsyvjMFnxtFw==\",\n      \"dev\": true,\n      \"hasInstallScript\": true,\n      \"bin\": {\n        \"esbuild\": \"bin/esbuild\"\n      },\n      \"engines\": {\n        \"node\": \">=12\"\n      },\n      \"optionalDependencies\": {\n        \"@esbuild/android-arm\": \"0.17.4\",\n        \"@esbuild/android-arm64\": \"0.17.4\",\n        \"@esbuild/android-x64\": \"0.17.4\",\n        \"@esbuild/darwin-arm64\": \"0.17.4\",\n        \"@esbuild/darwin-x64\": \"0.17.4\",\n        \"@esbuild/freebsd-arm64\": \"0.17.4\",\n        \"@esbuild/freebsd-x64\": \"0.17.4\",\n        \"@esbuild/linux-arm\": \"0.17.4\",\n        \"@esbuild/linux-arm64\": \"0.17.4\",\n        \"@esbuild/linux-ia32\": \"0.17.4\",\n        \"@esbuild/linux-loong64\": \"0.17.4\",\n        \"@esbuild/linux-mips64el\": \"0.17.4\",\n        \"@esbuild/linux-ppc64\": \"0.17.4\",\n        \"@esbuild/linux-riscv64\": \"0.17.4\",\n        \"@esbuild/linux-s390x\": \"0.17.4\",\n        \"@esbuild/linux-x64\": \"0.17.4\",\n        \"@esbuild/netbsd-x64\": \"0.17.4\",\n        \"@esbuild/openbsd-x64\": \"0.17.4\",\n        \"@esbuild/sunos-x64\": \"0.17.4\",\n        \"@esbuild/win32-arm64\": \"0.17.4\",\n        \"@esbuild/win32-ia32\": \"0.17.4\",\n        \"@esbuild/win32-x64\": \"0.17.4\"\n      }\n    }\n  },\n  \"dependencies\": {\n    \"@esbuild/android-arm\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.17.4.tgz\",\n      \"integrity\": \"sha512-R9GCe2xl2XDSc2XbQB63mFiFXHIVkOP+ltIxICKXqUPrFX97z6Z7vONCLQM1pSOLGqfLrGi3B7nbhxmFY/fomg==\",\n      \"dev\": true,\n      \"optional\": true\n    },\n    \"@esbuild/android-arm64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.17.4.tgz\",\n      \"integrity\": \"sha512-91VwDrl4EpxBCiG6h2LZZEkuNvVZYJkv2T9gyLG/mhGG1qrM7i5SwUcg/hlSPnL/4hDT0TFcF35/XMGSn0bemg==\",\n      \"dev\": true,\n      \"optional\": true\n    },\n    \"@esbuild/android-x64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.17.4.tgz\",\n      \"integrity\": \"sha512-mGSqhEPL7029XL7QHNPxPs15JVa02hvZvysUcyMP9UXdGFwncl2WU0bqx+Ysgzd+WAbv8rfNa73QveOxAnAM2w==\",\n      \"dev\": true,\n      \"optional\": true\n    },\n    \"@esbuild/darwin-arm64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.17.4.tgz\",\n      \"integrity\": \"sha512-tTyJRM9dHvlMPt1KrBFVB5OW1kXOsRNvAPtbzoKazd5RhD5/wKlXk1qR2MpaZRYwf4WDMadt0Pv0GwxB41CVow==\",\n      \"dev\": true,\n      \"optional\": true\n    },\n    \"@esbuild/darwin-x64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.17.4.tgz\",\n      \"integrity\": \"sha512-phQuC2Imrb3TjOJwLN8EO50nb2FHe8Ew0OwgZDH1SV6asIPGudnwTQtighDF2EAYlXChLoMJwqjAp4vAaACq6w==\",\n      \"dev\": true,\n      \"optional\": true\n    },\n    \"@esbuild/freebsd-arm64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.17.4.tgz\",\n      \"integrity\": \"sha512-oH6JUZkocgmjzzYaP5juERLpJQSwazdjZrTPgLRmAU2bzJ688x0vfMB/WTv4r58RiecdHvXOPC46VtsMy/mepg==\",\n      \"dev\": true,\n      \"optional\": true\n    },\n    \"@esbuild/freebsd-x64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.17.4.tgz\",\n      \"integrity\": \"sha512-U4iWGn/9TrAfpAdfd56eO0pRxIgb0a8Wj9jClrhT8hvZnOnS4dfMPW7o4fn15D/KqoiVYHRm43jjBaTt3g/2KA==\",\n      \"dev\": true,\n      \"optional\": true\n    },\n    \"@esbuild/linux-arm\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.17.4.tgz\",\n      \"integrity\": \"sha512-S2s9xWTGMTa/fG5EyMGDeL0wrWVgOSQcNddJWgu6rG1NCSXJHs76ZP9AsxjB3f2nZow9fWOyApklIgiTGZKhiw==\",\n      \"dev\": true,\n      \"optional\": true\n    },\n    \"@esbuild/linux-arm64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.17.4.tgz\",\n      \"integrity\": \"sha512-UkGfQvYlwOaeYJzZG4cLV0hCASzQZnKNktRXUo3/BMZvdau40AOz9GzmGA063n1piq6VrFFh43apRDQx8hMP2w==\",\n      \"dev\": true,\n      \"optional\": true\n    },\n    \"@esbuild/linux-ia32\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.17.4.tgz\",\n      \"integrity\": \"sha512-3lqFi4VFo/Vwvn77FZXeLd0ctolIJH/uXkH3yNgEk89Eh6D3XXAC9/iTPEzeEpsNE5IqGIsFa5Z0iPeOh25IyA==\",\n      \"dev\": true,\n      \"optional\": true\n    },\n    \"@esbuild/linux-loong64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.17.4.tgz\",\n      \"integrity\": \"sha512-HqpWZkVslDHIwdQ9D+gk7NuAulgQvRxF9no54ut/M55KEb3mi7sQS3GwpPJzSyzzP0UkjQVN7/tbk88/CaX4EQ==\",\n      \"dev\": true,\n      \"optional\": true\n    },\n    \"@esbuild/linux-mips64el\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.17.4.tgz\",\n      \"integrity\": \"sha512-d/nMCKKh/SVDbqR9ju+b78vOr0tNXtfBjcp5vfHONCCOAL9ad8gN9dC/u+UnH939pz7wO+0u/x9y1MaZcb/lKA==\",\n      \"dev\": true,\n      \"optional\": true\n    },\n    \"@esbuild/linux-ppc64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.17.4.tgz\",\n      \"integrity\": \"sha512-lOD9p2dmjZcNiTU+sGe9Nn6G3aYw3k0HBJies1PU0j5IGfp6tdKOQ6mzfACRFCqXjnBuTqK7eTYpwx09O5LLfg==\",\n      \"dev\": true,\n      \"optional\": true\n    },\n    \"@esbuild/linux-riscv64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.17.4.tgz\",\n      \"integrity\": \"sha512-mTGnwWwVshAjGsd8rP+K6583cPDgxOunsqqldEYij7T5/ysluMHKqUIT4TJHfrDFadUwrghAL6QjER4FeqQXoA==\",\n      \"dev\": true,\n      \"optional\": true\n    },\n    \"@esbuild/linux-s390x\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.17.4.tgz\",\n      \"integrity\": \"sha512-AQYuUGp50XM29/N/dehADxvc2bUqDcoqrVuijop1Wv72SyxT6dDB9wjUxuPZm2HwIM876UoNNBMVd+iX/UTKVQ==\",\n      \"dev\": true,\n      \"optional\": true\n    },\n    \"@esbuild/linux-x64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.17.4.tgz\",\n      \"integrity\": \"sha512-+AsFBwKgQuhV2shfGgA9YloxLDVjXgUEWZum7glR5lLmV94IThu/u2JZGxTgjYby6kyXEx8lKOqP5rTEVBR0Rw==\",\n      \"dev\": true,\n      \"optional\": true\n    },\n    \"@esbuild/netbsd-x64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.17.4.tgz\",\n      \"integrity\": \"sha512-zD1TKYX9553OiLS/qkXPMlWoELYkH/VkzRYNKEU+GwFiqkq0SuxsKnsCg5UCdxN3cqd+1KZ8SS3R+WG/Hxy2jQ==\",\n      \"dev\": true,\n      \"optional\": true\n    },\n    \"@esbuild/openbsd-x64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.17.4.tgz\",\n      \"integrity\": \"sha512-PY1NjEsLRhPEFFg1AV0/4Or/gR+q2dOb9s5rXcPuCjyHRzbt8vnHJl3vYj+641TgWZzTFmSUnZbzs1zwTzjeqw==\",\n      \"dev\": true,\n      \"optional\": true\n    },\n    \"@esbuild/sunos-x64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.17.4.tgz\",\n      \"integrity\": \"sha512-B3Z7s8QZQW9tKGleMRXvVmwwLPAUoDCHs4WZ2ElVMWiortLJFowU1NjAhXOKjDgC7o9ByeVcwyOlJ+F2r6ZgmQ==\",\n      \"dev\": true,\n      \"optional\": true\n    },\n    \"@esbuild/win32-arm64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.17.4.tgz\",\n      \"integrity\": \"sha512-0HCu8R3mY/H5V7N6kdlsJkvrT591bO/oRZy8ztF1dhgNU5xD5tAh5bKByT1UjTGjp/VVBsl1PDQ3L18SfvtnBQ==\",\n      \"dev\": true,\n      \"optional\": true\n    },\n    \"@esbuild/win32-ia32\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.17.4.tgz\",\n      \"integrity\": \"sha512-VUjhVDQycse1gLbe06pC/uaA0M+piQXJpdpNdhg8sPmeIZZqu5xPoGWVCmcsOO2gaM2cywuTYTHkXRozo3/Nkg==\",\n      \"dev\": true,\n      \"optional\": true\n    },\n    \"@esbuild/win32-x64\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.17.4.tgz\",\n      \"integrity\": \"sha512-0kLAjs+xN5OjhTt/aUA6t48SfENSCKgGPfExADYTOo/UCn0ivxos9/anUVeSfg+L+2O9xkFxvJXIJfG+Q4sYSg==\",\n      \"dev\": true,\n      \"optional\": true\n    },\n    \"esbuild\": {\n      \"version\": \"0.17.4\",\n      \"resolved\": \"https://registry.npmjs.org/esbuild/-/esbuild-0.17.4.tgz\",\n      \"integrity\": \"sha512-zBn9MeCwT7W5F1a3lXClD61ip6vQM+H8Msb0w8zMT4ZKBpDg+rFAraNyWCDelB/2L6M3g6AXHPnsyvjMFnxtFw==\",\n      \"dev\": true,\n      \"requires\": {\n        \"@esbuild/android-arm\": \"0.17.4\",\n        \"@esbuild/android-arm64\": \"0.17.4\",\n        \"@esbuild/android-x64\": \"0.17.4\",\n        \"@esbuild/darwin-arm64\": \"0.17.4\",\n        \"@esbuild/darwin-x64\": \"0.17.4\",\n        \"@esbuild/freebsd-arm64\": \"0.17.4\",\n        \"@esbuild/freebsd-x64\": \"0.17.4\",\n        \"@esbuild/linux-arm\": \"0.17.4\",\n        \"@esbuild/linux-arm64\": \"0.17.4\",\n        \"@esbuild/linux-ia32\": \"0.17.4\",\n        \"@esbuild/linux-loong64\": \"0.17.4\",\n        \"@esbuild/linux-mips64el\": \"0.17.4\",\n        \"@esbuild/linux-ppc64\": \"0.17.4\",\n        \"@esbuild/linux-riscv64\": \"0.17.4\",\n        \"@esbuild/linux-s390x\": \"0.17.4\",\n        \"@esbuild/linux-x64\": \"0.17.4\",\n        \"@esbuild/netbsd-x64\": \"0.17.4\",\n        \"@esbuild/openbsd-x64\": \"0.17.4\",\n        \"@esbuild/sunos-x64\": \"0.17.4\",\n        \"@esbuild/win32-arm64\": \"0.17.4\",\n        \"@esbuild/win32-ia32\": \"0.17.4\",\n        \"@esbuild/win32-x64\": \"0.17.4\"\n      }\n    }\n  }\n}\n"
            },
            {
              "type": "file",
              "path": "${snakeName}/client/package.json",
              "content": "{\n  \"name\": \"client\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"directories\": {\n    \"test\": \"test\"\n  },\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"esbuild\": \"^0.17.4\"\n  }\n}\n"
            },
            {
              "type": "file",
              "path": "${snakeName}/client/packages.dhall",
              "content": "{-\nWelcome to your new Dhall package-set!\n\nBelow are instructions for how to edit this file for most use\ncases, so that you don't need to know Dhall to use it.\n\n## Use Cases\n\nMost will want to do one or both of these options:\n1. Override/Patch a package's dependency\n2. Add a package not already in the default package set\n\nThis file will continue to work whether you use one or both options.\nInstructions for each option are explained below.\n\n### Overriding/Patching a package\n\nPurpose:\n- Change a package's dependency to a newer/older release than the\n    default package set's release\n- Use your own modified version of some dependency that may\n    include new API, changed API, removed API by\n    using your custom git repo of the library rather than\n    the package set's repo\n\nSyntax:\nwhere `entityName` is one of the following:\n- dependencies\n- repo\n- version\n-------------------------------\nlet upstream = --\nin  upstream\n  with packageName.entityName = \"new value\"\n-------------------------------\n\nExample:\n-------------------------------\nlet upstream = --\nin  upstream\n  with halogen.version = \"master\"\n  with halogen.repo = \"https://example.com/path/to/git/repo.git\"\n\n  with halogen-vdom.version = \"v4.0.0\"\n  with halogen-vdom.dependencies = [ \"extra-dependency\" ] # halogen-vdom.dependencies\n-------------------------------\n\n### Additions\n\nPurpose:\n- Add packages that aren't already included in the default package set\n\nSyntax:\nwhere `<version>` is:\n- a tag (i.e. \"v4.0.0\")\n- a branch (i.e. \"master\")\n- commit hash (i.e. \"701f3e44aafb1a6459281714858fadf2c4c2a977\")\n-------------------------------\nlet upstream = --\nin  upstream\n  with new-package-name =\n    { dependencies =\n       [ \"dependency1\"\n       , \"dependency2\"\n       ]\n    , repo =\n       \"https://example.com/path/to/git/repo.git\"\n    , version =\n        \"<version>\"\n    }\n-------------------------------\n\nExample:\n-------------------------------\nlet upstream = --\nin  upstream\n  with benchotron =\n      { dependencies =\n          [ \"arrays\"\n          , \"exists\"\n          , \"profunctor\"\n          , \"strings\"\n          , \"quickcheck\"\n          , \"lcg\"\n          , \"transformers\"\n          , \"foldable-traversable\"\n          , \"exceptions\"\n          , \"node-fs\"\n          , \"node-buffer\"\n          , \"node-readline\"\n          , \"datetime\"\n          , \"now\"\n          ]\n      , repo =\n          \"https://github.com/hdgarrood/purescript-benchotron.git\"\n      , version =\n          \"v7.0.0\"\n      }\n-------------------------------\n-}\nlet upstream =\n      https://github.com/purescript/package-sets/releases/download/psc-0.15.3-20220712/packages.dhall\n        sha256:ffc496e19c93f211b990f52e63e8c16f31273d4369dbae37c7cf6ea852d4442f\n\nin  upstream\n"
            },
            {
              "type": "file",
              "path": "${snakeName}/client/spago.dhall",
              "content": "{-\nWelcome to a Spago project!\nYou can edit this file as you like.\n\nNeed help? See the following resources:\n- Spago documentation: https://github.com/purescript/spago\n- Dhall language tour: https://docs.dhall-lang.org/tutorials/Language-Tour.html\n\nWhen creating a new Spago project, you can use\n`spago init --no-comments` or `spago init -C`\nto generate this file without the comments in this block.\n-}\n{ name = \"${snakeName}-client\"\n, dependencies =\n  [ \"aff\"\n  , \"arrays\"\n  , \"console\"\n  , \"datetime\"\n  , \"debug\"\n  , \"effect\"\n  , \"either\"\n  , \"foldable-traversable\"\n  , \"foreign\"\n  , \"halogen\"\n  , \"halogen-subscriptions\"\n  , \"lists\"\n  , \"maybe\"\n  , \"newtype\"\n  , \"ordered-collections\"\n  , \"partial\"\n  , \"prelude\"\n  , \"routing\"\n  , \"routing-duplex\"\n  , \"simple-json\"\n  , \"strings\"\n  , \"transformers\"\n  , \"web-dom\"\n  , \"web-events\"\n  , \"web-html\"\n  , \"web-socket\"\n  , \"web-storage\"\n  ]\n, packages = ./packages.dhall\n, sources = [ \"src/**/*.purs\", \"test/**/*.purs\", \"../Common/**/*.purs\" ]\n}\n"
            },
            {
              "type": "directory",
              "path": "${snakeName}/client/src",
              "children": [
                {
                  "type": "directory",
                  "path": "${snakeName}/client/src/${pascalName}",
                  "children": [
                    {
                      "type": "directory",
                      "path": "${snakeName}/client/src/${pascalName}/Components",
                      "children": [
                        {
                          "type": "file",
                          "path": "${snakeName}/client/src/${pascalName}/Components/Chat.purs",
                          "content": "module ${pascalName}.Components.Chat\n  ( Input\n  , Output\n  , component\n  ) where\n\nimport Prelude\n\nimport ${pascalName}.Components.Settings as Settings\nimport ${pascalName}.Common.Types (Channel(..), ChannelEvent(..), ServerMessage(..), User)\nimport ${pascalName}.Common.Types as ClientMessage\nimport Control.Monad.Maybe.Trans (MaybeT(..), runMaybeT)\nimport Data.Array as Array\nimport Data.Either (Either(..), hush)\nimport Data.List.NonEmpty as NonEmptyList\nimport Data.Map (Map)\nimport Data.Map as Map\nimport Data.Maybe (Maybe(..), fromMaybe)\nimport Data.Newtype (class Newtype, unwrap, wrap)\nimport Data.Set as Set\nimport Data.String (Pattern(..), Replacement(..))\nimport Data.String as String\nimport Data.Time.Duration (Milliseconds(..))\nimport Data.Traversable (traverse, traverse_)\nimport Effect.Aff as Aff\nimport Effect.Aff.Class (class MonadAff, liftAff)\nimport Effect.Class (class MonadEffect, liftEffect)\nimport Effect.Class.Console as Console\nimport Foreign as Foreign\nimport Halogen as H\nimport Halogen.HTML as HH\nimport Halogen.HTML.Events as HE\nimport Halogen.HTML.Properties as HP\nimport Halogen.Subscription as HS\nimport Simple.JSON (class ReadForeign, class WriteForeign)\nimport Simple.JSON as Json\nimport Type.Proxy (Proxy(..))\nimport Web.DOM.Element as Element\nimport Web.Event.Event (Event)\nimport Web.Event.Event as Event\nimport Web.Event.EventTarget as EventTarget\nimport Web.HTML as Html\nimport Web.HTML.HTMLElement as HtmlElement\nimport Web.HTML.Location as Location\nimport Web.HTML.Window as Window\nimport Web.Socket.Event.EventTypes as WebSocketEventTypes\nimport Web.Socket.Event.MessageEvent as MessageEvent\nimport Web.Socket.ReadyState as ReadyState\nimport Web.Socket.WebSocket (WebSocket)\nimport Web.Socket.WebSocket as WebSocket\nimport Web.Storage.Storage as LocalStorage\n\ntype Input = { user :: User }\n\ntype Output = Void\n\ntype ChildSlots = (settings :: forall query. H.Slot query Settings.Output Unit)\n\nnewtype State = State StateRecord\n\nderive instance newtypeState :: Newtype State _\n\n_settings = Proxy :: Proxy \"settings\"\n\ntype StateRecord =\n  { user :: User\n  , events :: Map Channel (Array ChannelEvent)\n  , currentChannel :: Maybe Channel\n  , socket :: Maybe WebSocket\n  , currentMessage :: String\n  , webSocketSubscription :: Maybe H.SubscriptionId\n  }\n\ndata Action\n  = Initialize\n  | Finalize\n  | Receive Input\n  | SetCurrentMessage { message :: String }\n  | SendCurrentMessage { message :: String }\n  | SocketEvent { event :: ServerMessage }\n  | SelectChannel { channel :: Channel }\n  | SettingsOutput Settings.Output\n  | SubmitTextInput { input :: String, event :: Event }\n  | JoinChannel { channel :: Channel }\n  | LeaveChannel { channel :: Channel }\n  | ChangeUser { user :: User }\n\ninstance showAction :: Show Action where\n  show Initialize = \"Initialize\"\n  show Finalize = \"Finalize\"\n  show (Receive input) = \"Receive \" <> show input\n  show (SetCurrentMessage r) = \"SetCurrentMessage \" <> show r\n  show (SendCurrentMessage { message }) = \"SendCurrentMessage \" <> show { message }\n  show (SocketEvent r) = \"SocketEvent \" <> show r\n  show (SelectChannel r) = \"SelectChannel \" <> show r\n  show (SettingsOutput r) = \"SettingsOutput \" <> show r\n  show (SubmitTextInput { input }) = \"SubmitTextInput \" <> show { input, event: \"<event>\" }\n  show (JoinChannel r) = \"JoinChannel \" <> show r\n  show (LeaveChannel r) = \"LeaveChannel \" <> show r\n  show (ChangeUser r) = \"ChangeUser \" <> show r\n\ncomponent :: forall query m. MonadAff m => H.Component query Input Output m\ncomponent =\n  H.mkComponent\n    { initialState: \\{ user } ->\n        State\n          { user\n          , events: Map.empty\n          , socket: Nothing\n          , currentMessage: \"\"\n          , webSocketSubscription: Nothing\n          , currentChannel: Nothing\n          }\n    , render\n    , eval: H.mkEval $ H.defaultEval\n        { handleAction = handleAction\n        , initialize = Just Initialize\n        , finalize = Just Finalize\n        , receive = Receive >>> Just\n        }\n    }\n  where\n  render :: State -> H.ComponentHTML Action ChildSlots m\n  render (State { events, currentMessage, currentChannel, user }) = do\n    let channelEvents = fromMaybe [] $ currentChannel >>= \\c -> Map.lookup c events\n    HH.div [ \"chat-window\" # wrap # HP.class_ ]\n      [ HH.h1_ [ HH.text \"${pascalName}\" ]\n      , HH.slot _settings unit Settings.component { username: unwrap user } SettingsOutput\n      , HH.h2_ [ currentChannel # map unwrap # fromMaybe \"No channel selected\" # HH.text ]\n      , HH.div [ \"channel-select-box\" # wrap # HP.class_ ] $\n          map renderSelectChannel (events # Map.keys # Set.toUnfoldable)\n      , HH.div [ \"chat-components\" # wrap # HP.class_ ]\n          [ renderChatMessages channelEvents\n          , HH.form\n              [ HE.onSubmit \\e -> SubmitTextInput { input: currentMessage, event: e }\n              , \"message-form\" # wrap # HP.class_\n              ]\n              [ HH.input\n                  [ HP.value currentMessage\n                  , HP.placeholder \"Type a message...\"\n                  , HE.onValueInput \\message -> SetCurrentMessage { message }\n                  , HP.autofocus true\n                  ]\n              ]\n          ]\n      ]\n\n  renderChatMessages :: forall slots. Array ChannelEvent -> H.ComponentHTML Action slots m\n  renderChatMessages events =\n    HH.pre\n      [ \"message-box\" # wrap # HP.class_, \"message-box\" # wrap # HP.ref ] $\n      events # map renderChannelEvent\n\n  renderChannelEvent :: forall slots. ChannelEvent -> H.ComponentHTML Action slots m\n  renderChannelEvent (ChannelJoined { user, channel }) =\n    HH.div [ \"join-message\" # wrap # HP.class_ ]\n      [ renderUser user, HH.text $ \" joined \" <> unwrap channel ]\n  renderChannelEvent (ChannelLeft { user, channel }) =\n    HH.div [ \"leave-message\" # wrap # HP.class_ ]\n      [ renderUser user, HH.text $ \" left \" <> unwrap channel ]\n  renderChannelEvent (ChannelMessageSent { user, message }) =\n    HH.div [ \"chat-message\" # wrap # HP.class_ ]\n      [ renderUser user, HH.text $ \": \" <> message ]\n  renderChannelEvent (UserRenamed { oldName, newName }) =\n    HH.div [ \"rename-message\" # wrap # HP.class_ ]\n      [ renderUser oldName, HH.text $ \" is now known as \", renderUser newName ]\n\n  renderSelectChannel :: forall slots. Channel -> H.ComponentHTML Action slots m\n  renderSelectChannel channel =\n    HH.button\n      [ HE.onClick \\_ -> SelectChannel { channel }\n      , \"channel-select-button\" # wrap # HP.class_\n      ]\n      [ channel # unwrap # HH.text ]\n\n  renderUser :: forall slots. User -> H.ComponentHTML Action slots m\n  renderUser user = HH.span [ \"chat-user\" # wrap # HP.class_ ] [ HH.text $ unwrap user ]\n\n  handleAction :: forall slots. Action -> H.HalogenM State Action slots Output m Unit\n  handleAction Initialize = do\n    socket <- connectToWebSocket\n    modify_ $ _ { socket = Just socket }\n    user <- gets _.user\n    channelsToJoin <- getChannelsToJoin\n    sendInitialCommands socket user channelsToJoin\n    modify_ $ _ { currentChannel = Array.head channelsToJoin }\n    subscription <- subscribeToSocketEvents socket \\event -> SocketEvent { event }\n    modify_ $ _ { webSocketSubscription = Just subscription }\n  handleAction Finalize = do\n    socket <- gets _.socket\n    liftEffect $ traverse_ WebSocket.close socket\n  handleAction (SetCurrentMessage { message }) =\n    modify_ $ _ { currentMessage = message }\n  handleAction (SendCurrentMessage { message }) = do\n    modify_ $ _ { currentMessage = \"\" }\n    { socket: maybeSocket, currentChannel: maybeChannel } <- get\n    void $ runMaybeT do\n      socket <- MaybeT $ pure maybeSocket\n      channel <- MaybeT $ pure maybeChannel\n      { channel, message } # ClientMessage.SendMessage # sendString socket\n    scrollMessagesToBottom\n  handleAction (SocketEvent { event: ChannelMessage { event: ChannelLeft { user, channel } } }) = do\n    { user: ourUser, currentChannel, events } <- get\n    when (user == ourUser) do\n      modify_ $ _ { events = Map.delete channel events }\n    when (currentChannel == Just channel) do\n      modify_ $ _ { currentChannel = events # Map.keys # Array.fromFoldable # Array.head }\n  handleAction (SocketEvent { event: ChannelMessage { channel, event } }) = do\n    modify_ $ \\s -> s\n      { events = Map.insertWith (<>) channel [ event ] s.events }\n    scrollMessagesToBottom\n  handleAction (SocketEvent {}) = do\n    pure unit\n  handleAction (Receive { user }) = do\n    modify_ $ _ { user = user }\n    socket <- gets _.socket\n    traverse_ (\\s -> sendOnReady s [ ClientMessage.SetUsername { user } ]) socket\n  handleAction (SelectChannel { channel }) = do\n    modify_ $ _ { currentChannel = Just channel }\n    scrollMessagesToBottom\n  handleAction (SettingsOutput { username }) = do\n    let user = wrap username\n    modify_ $ _ { user = user }\n    socket <- gets _.socket\n    traverse_ (\\s -> sendOnReady s [ ClientMessage.SetUsername { user } ]) socket\n  handleAction (SubmitTextInput { input, event: e }) = do\n    liftEffect $ Event.preventDefault e\n    modify_ _ { currentMessage = \"\" }\n    user <- gets _.user\n    let actions = interpretInput user input\n    traverse_ handleAction actions\n  handleAction (JoinChannel { channel }) = do\n    { socket: maybeSocket, user } <- get\n    traverse_ (\\s -> sendOnReady s [ ClientMessage.JoinChannel { channel, user } ]) maybeSocket\n    modify_ $ _ { currentChannel = Just channel }\n    scrollMessagesToBottom\n  handleAction (LeaveChannel { channel }) = do\n    { socket: maybeSocket, user } <- get\n    traverse_ (\\s -> sendOnReady s [ ClientMessage.LeaveChannel { channel, user } ]) maybeSocket\n  handleAction (ChangeUser { user }) = do\n    { socket: maybeSocket } <- get\n    traverse_ (\\s -> sendOnReady s [ ClientMessage.SetUsername { user } ]) maybeSocket\n    modify_ $ _ { user = user }\n\n  interpretInput :: User -> String -> Array Action\n  interpretInput _user input = do\n    let\n      splits = String.split (Pattern \" \") input\n      command = Array.head splits\n      arguments = splits # Array.tail # fromMaybe []\n    case command of\n      Just \"/join\" -> arguments # parseJoinChannel # map JoinChannel # Array.fromFoldable\n      Just \"/j\" -> arguments # parseJoinChannel # map JoinChannel # Array.fromFoldable\n      Just \"/leave\" -> arguments # parseLeaveChannel # map LeaveChannel # Array.fromFoldable\n      Just \"/l\" -> arguments # parseLeaveChannel # map LeaveChannel # Array.fromFoldable\n      Just \"/nick\" -> arguments # parseChangeUser # map ChangeUser # Array.fromFoldable\n      Just \"/name\" -> arguments # parseChangeUser # map ChangeUser # Array.fromFoldable\n      Just \"/username\" -> arguments # parseChangeUser # map ChangeUser # Array.fromFoldable\n      Just \"/user\" -> arguments # parseChangeUser # map ChangeUser # Array.fromFoldable\n      _ -> [ SendCurrentMessage { message: input } ]\n\n  parseJoinChannel :: Array String -> Maybe { channel :: Channel }\n  parseJoinChannel arguments = do\n    channel <- Array.head arguments\n    pure { channel: wrap channel }\n\n  parseLeaveChannel :: Array String -> Maybe { channel :: Channel }\n  parseLeaveChannel arguments = do\n    channel <- Array.head arguments\n    pure { channel: wrap channel }\n\n  parseChangeUser :: Array String -> Maybe { user :: User }\n  parseChangeUser arguments = do\n    user <- Array.head arguments\n    pure { user: wrap user }\n\n  scrollMessagesToBottom :: forall slots. H.HalogenM State Action slots Output m Unit\n  scrollMessagesToBottom = do\n    messageBox <- \"message-box\" # wrap # H.getHTMLElementRef\n    liftEffect $ traverse_ (HtmlElement.toElement >>> scrollToBottom) messageBox\n\n  scrollToBottom e = do\n    scrollHeight <- Element.scrollHeight e\n    Element.setScrollTop scrollHeight e\n\ngetChannelsToJoin :: forall m. MonadAff m => m (Array Channel)\ngetChannelsToJoin = do\n  fromMaybe [ Channel \"general\" ] <$> getFromLocalStorage \"${snakeName}-auto-join\"\n\ngetFromLocalStorage :: forall m a. MonadAff m => ReadForeign a => String -> m (Maybe a)\ngetFromLocalStorage key = do\n  window <- liftEffect Html.window\n  storage <- liftEffect $ Window.localStorage window\n  maybeItem <- storage # LocalStorage.getItem key # liftEffect\n  maybeItem\n    # traverse (Json.readJSON >>> hush)\n    # join\n    # pure\n\nsubscribeToSocketEvents\n  :: forall m message action state output childSlots\n   . MonadAff m\n  => ReadForeign message\n  => WebSocket\n  -> (message -> action)\n  -> H.HalogenM state action childSlots output m H.SubscriptionId\nsubscribeToSocketEvents socket f = do\n  emitter <- webSocketEmitter socket f\n  H.subscribe emitter\n\nwebSocketEmitter\n  :: forall m message action\n   . MonadAff m\n  => ReadForeign message\n  => WebSocket\n  -> (message -> action)\n  -> m (HS.Emitter action)\nwebSocketEmitter socket f = do\n  { emitter, listener } <- liftEffect $ HS.create\n  let socketEventTarget = WebSocket.toEventTarget socket\n  eventListener <- liftEffect $ EventTarget.eventListener \\e -> do\n    case MessageEvent.fromEvent e of\n      Just messageEvent -> do\n        let data_ = MessageEvent.data_ messageEvent\n        if Foreign.tagOf data_ == \"String\" then do\n          case data_ # Foreign.unsafeFromForeign # Json.readJSON of\n            Right message -> do\n              message # f # HS.notify listener # liftEffect\n            Left error -> do\n              Console.error $ NonEmptyList.foldMap Foreign.renderForeignError error\n              pure unit\n        else\n          pure unit\n      Nothing -> do\n        pure unit\n  _ <- liftEffect $\n    EventTarget.addEventListener WebSocketEventTypes.onMessage eventListener false socketEventTarget\n  pure emitter\n\nsendInitialCommands :: forall m. MonadAff m => WebSocket -> User -> Array Channel -> m Unit\nsendInitialCommands socket user channels = do\n  let channelJoins = map (\\channel -> ClientMessage.JoinChannel { user, channel }) channels\n  [ [ ClientMessage.SetUsername { user } ], channelJoins ] # Array.fold # sendOnReady socket\n\nsendString :: forall m a. MonadEffect m => WriteForeign a => WebSocket -> a -> m Unit\nsendString socket a = do\n  a # Json.writeJSON # WebSocket.sendString socket # liftEffect\n\nsendOnReady :: forall m a. MonadAff m => WriteForeign a => WebSocket -> Array a -> m Unit\nsendOnReady socket messages = do\n  readyState <- liftEffect $ WebSocket.readyState socket\n  case readyState of\n    ReadyState.Open -> do\n      traverse_ (sendString socket) messages\n    _ -> do\n      liftAff $ Aff.delay $ Milliseconds 25.0\n      sendOnReady socket messages\n\nconnectToWebSocket :: forall m. MonadEffect m => m WebSocket\nconnectToWebSocket = do\n  baseUrl <- getOrigin\n  let url = Array.fold [ String.replace (Pattern \"http\") (Replacement \"ws\") baseUrl, \"/ws\" ]\n  liftEffect $ WebSocket.create url []\n\nmodify_ :: forall m r state slots. Newtype state r => (r -> r) -> H.HalogenM state Action slots Output m Unit\nmodify_ f = H.modify_ (unwrap >>> f >>> wrap)\n\ngets :: forall m state r a slots. Newtype state r => (r -> a) -> H.HalogenM state Action slots Output m a\ngets f = H.gets (unwrap >>> f)\n\nget :: forall m state r slots. Newtype state r => H.HalogenM state Action slots Output m r\nget = H.gets unwrap\n\ngetOrigin :: forall m. MonadEffect m => m String\ngetOrigin = liftEffect $ Html.window >>= Window.location >>= Location.origin\n"
                        },
                        {
                          "type": "file",
                          "path": "${snakeName}/client/src/${pascalName}/Components/PickUsername.purs",
                          "content": "module ${pascalName}.Components.PickUsername\n  ( Input\n  , Output(..)\n  , component\n  ) where\n\nimport Prelude\n\nimport Effect.Aff.Class (class MonadAff)\nimport Effect.Class as Effect\nimport Halogen as H\nimport Halogen.HTML as HH\nimport Halogen.HTML.Events as HE\nimport Halogen.HTML.Properties as HP\nimport Web.Event.Event (Event)\nimport Web.Event.Event as Event\n\ntype Input = {}\n\ntype State = { username :: String }\n\ndata Action\n  = SetUsernameField String\n  | PickUsername String Event\n\ndata Output = UsernamePicked String\n\ncomponent :: forall query m. MonadAff m => H.Component query Input Output m\ncomponent = H.mkComponent\n  { initialState: \\_ -> { username: \"\" }\n  , render\n  , eval: H.mkEval $ H.defaultEval { handleAction = handleAction }\n  }\n  where\n  render :: State -> H.ComponentHTML Action () m\n  render { username } =\n    HH.div_\n      [ HH.form [ HE.onSubmit \\e -> PickUsername username e ]\n          [ HH.input\n              [ HP.type_ HP.InputText\n              , HP.value username\n              , HE.onValueInput SetUsernameField\n              ]\n          , HH.button [ HP.type_ HP.ButtonSubmit ] [ HH.text \"Pick\" ]\n          ]\n      ]\n\n  handleAction :: Action -> H.HalogenM State Action () Output m Unit\n  handleAction (SetUsernameField username) = H.modify_ _ { username = username }\n  handleAction (PickUsername username e) = do\n    Effect.liftEffect $ Event.preventDefault e\n    H.raise $ UsernamePicked username\n\n"
                        },
                        {
                          "type": "file",
                          "path": "${snakeName}/client/src/${pascalName}/Components/Settings.purs",
                          "content": "module ${pascalName}.Components.Settings (component, Output) where\n\nimport Prelude\n\nimport Effect.Aff.Class (class MonadAff)\nimport Halogen (liftEffect)\nimport Halogen as H\nimport Halogen.HTML as HH\nimport Halogen.HTML.Events as HE\nimport Halogen.HTML.Properties as HP\nimport Web.Event.Event (Event)\nimport Web.Event.Event as Event\n\ntype Input = { username :: String }\ntype Output = { username :: String }\n\ntype State = { username :: String }\n\ndata Action\n  = SetUsername String\n  | SubmitUsername String Event\n\ncomponent :: forall query m. MonadAff m => H.Component query Input Output m\ncomponent = H.mkComponent\n  { initialState: identity\n  , render\n  , eval: H.mkEval $ H.defaultEval { handleAction = handleAction }\n  }\n  where\n  render :: State -> H.ComponentHTML Action () m\n  render { username } =\n    HH.div_\n      [ HH.label [ HP.for \"username\" ] [ HH.text \"Change username\" ]\n      , HH.form\n          [ HE.onSubmit (SubmitUsername username) ]\n          [ HH.input\n              [ HP.type_ HP.InputText\n              , HP.id \"username\"\n              , HP.value username\n              , HE.onValueInput SetUsername\n              ]\n          ]\n      ]\n\n  handleAction :: Action -> H.HalogenM State Action () Output m Unit\n  handleAction (SetUsername username) = H.modify_ _ { username = username }\n  handleAction (SubmitUsername username e) = do\n    liftEffect $ Event.preventDefault e\n    H.raise { username }\n"
                        }
                      ]
                    },
                    {
                      "type": "file",
                      "path": "${snakeName}/client/src/${pascalName}/Types.purs",
                      "content": "module ${pascalName}.Types where\n\nimport Data.Generic.Rep (class Generic)\n\ndata ClientRoute\n  = ClientChat\n  | ClientSettings\n\nderive instance genericClientRoute :: Generic ClientRoute _\n"
                    },
                    {
                      "type": "directory",
                      "path": "${snakeName}/client/src/${pascalName}/Web",
                      "children": [
                        {
                          "type": "file",
                          "path": "${snakeName}/client/src/${pascalName}/Web/Notifications.js",
                          "content": "export const requestPermission_ = (onError, onSuccess) => {\n  Notification.requestPermission().then((permission) => {\n    onSuccess(permission);\n  }).catch((errorValue) => {\n    onError(errorValue);\n  });\n\n  return (_cancelError, _onCancelerError, onCancelerSuccess) => {\n    onCancelerSuccess();\n  };\n};\n\nexport const createNotification_ = (title, body, data) => {\n  return new Notification(title, {body, data});\n};\n"
                        },
                        {
                          "type": "file",
                          "path": "${snakeName}/client/src/${pascalName}/Web/Notifications.purs",
                          "content": "module Web.Notifications\n  ( requestPermission\n  , createNotification\n  , Title(..)\n  , Body(..)\n  , NotificationData(..)\n  , NotificationPermission(..)\n  , Notification\n  ) where\n\nimport Prelude\n\nimport Data.Generic.Rep (class Generic)\nimport Data.Newtype (class Newtype, unwrap)\nimport Effect (Effect)\nimport Effect.Aff (Aff)\nimport Effect.Aff.Compat (EffectFnAff)\nimport Effect.Aff.Compat as AffCompat\nimport Foreign (Foreign)\nimport Partial.Unsafe as Unsafe\n\ndata NotificationPermission\n  = DefaultNotificationPermission\n  | GrantedNotificationPermission\n  | DeniedNotificationPermission\n\nderive instance eqNotificationPermission :: Eq NotificationPermission\nderive instance ordNotificationPermission :: Ord NotificationPermission\nderive instance genericNotificationPermission :: Generic NotificationPermission _\n\ninstance showNotificationPermission :: Show NotificationPermission where\n  show DefaultNotificationPermission = \"default\"\n  show GrantedNotificationPermission = \"granted\"\n  show DeniedNotificationPermission = \"denied\"\n\nnewtype Title = Title String\n\nderive instance eqTitle :: Eq Title\nderive instance ordTitle :: Ord Title\nderive instance genericTitle :: Generic Title _\nderive instance newtypeTitle :: Newtype Title _\n\ninstance showTitle :: Show Title where\n  show (Title t) = \"Title \" <> t\n\nnewtype Body = Body String\n\nderive instance eqBody :: Eq Body\nderive instance ordBody :: Ord Body\nderive instance genericBody :: Generic Body _\nderive instance newtypeBody :: Newtype Body _\n\ninstance showBody :: Show Body where\n  show (Body b) = \"Body \" <> b\n\nnewtype NotificationData = NotificationData Foreign\n\nderive instance genericNotificationData :: Generic NotificationData _\nderive instance newtypeNotificationData :: Newtype NotificationData _\n\nrequestPermission :: Aff NotificationPermission\nrequestPermission =\n  unsafeStringToNotificationPermission <$> AffCompat.fromEffectFnAff requestPermission_\n\ncreateNotification :: Title -> Body -> NotificationData -> Effect Notification\ncreateNotification title body notificationData =\n  createNotification_ (unwrap title) (unwrap body) (unwrap notificationData)\n\nunsafeStringToNotificationPermission :: String -> NotificationPermission\nunsafeStringToNotificationPermission \"default\" = DefaultNotificationPermission\nunsafeStringToNotificationPermission \"granted\" = GrantedNotificationPermission\nunsafeStringToNotificationPermission \"denied\" = DeniedNotificationPermission\nunsafeStringToNotificationPermission other =\n  Unsafe.unsafeCrashWith $ \"Unknown notification permission: \" <> other\n\nforeign import requestPermission_ :: EffectFnAff String\nforeign import createNotification_ :: String -> String -> Foreign -> Effect Notification\nforeign import data Notification :: Type\n"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "file",
                  "path": "${snakeName}/client/src/Main.purs",
                  "content": "module Main where\n\nimport Prelude hiding ((/))\n\nimport ${pascalName}.Common.Types (User(..))\nimport ${pascalName}.Components.Chat as Chat\nimport ${pascalName}.Components.PickUsername as PickUsername\nimport Data.Either (hush)\nimport Data.Generic.Rep (class Generic)\nimport Data.Maybe (Maybe(..), fromMaybe)\nimport Effect (Effect)\nimport Effect.Aff as Aff\nimport Effect.Aff.Class (class MonadAff, liftAff)\nimport Effect.Class (class MonadEffect)\nimport Effect.Class as Effect\nimport Halogen as H\nimport Halogen.Aff as HA\nimport Halogen.HTML as HH\nimport Halogen.VDom.Driver as VDomDriver\nimport Routing.Duplex (RouteDuplex')\nimport Routing.Duplex as RoutingDuplex\nimport Routing.Duplex.Generic as RoutingDuplexGeneric\nimport Routing.Duplex.Generic.Syntax ((/))\nimport Routing.Hash as RoutingHash\nimport Type.Proxy (Proxy(..))\nimport Web.Notifications as Notifications\n\ndata Query a = Navigate Route a\n\ntype State = { route :: Route }\n\ndata Action\n  = Initialize\n  | UsernamePickerOutput PickUsername.Output\n\ntype OpaqueSlot slot = forall query. H.Slot query Void slot\n\ntype ChildSlots =\n  ( pickUsername :: forall query. H.Slot query PickUsername.Output Unit\n  , chat :: OpaqueSlot Unit\n  )\n\ndata Route\n  = PickUsername\n  | Chat String\n\nderive instance genericClientRoute :: Generic Route _\nderive instance eqClientRoute :: Eq Route\n\nrouteCodec :: RouteDuplex' Route\nrouteCodec = RoutingDuplex.root $ RoutingDuplexGeneric.sum\n  { \"PickUsername\": RoutingDuplexGeneric.noArgs\n  , \"Chat\": \"chat\" / RoutingDuplex.string RoutingDuplex.segment\n  }\n\nrouter :: forall m. MonadAff m => H.Component Query Unit Void m\nrouter = H.mkComponent\n  { initialState: \\_ -> { route: PickUsername }\n  , render\n  , eval: H.mkEval $ H.defaultEval\n      { handleQuery = handleQuery, handleAction = handleAction, initialize = Just Initialize }\n  }\n  where\n  render :: State -> H.ComponentHTML Action ChildSlots m\n  render { route: PickUsername } =\n    HH.slot (Proxy :: _ \"pickUsername\") unit PickUsername.component {} UsernamePickerOutput\n  render { route: Chat username } =\n    HH.slot_ (Proxy :: _ \"chat\") unit Chat.component { user: User username }\n\n  handleQuery :: forall a. Query a -> H.HalogenM State Action ChildSlots Void m (Maybe a)\n  handleQuery (Navigate newRoute next) = do\n    { route } <- H.get\n    when (route /= newRoute) do\n      H.modify_ _ { route = newRoute }\n\n    pure $ Just next\n\n  handleAction :: Action -> H.HalogenM State Action ChildSlots Void m Unit\n  handleAction Initialize = do\n    _notificationPermission <- liftAff Notifications.requestPermission\n    initialRoute <-\n      (RoutingDuplex.parse routeCodec >>> hush) <$> Effect.liftEffect RoutingHash.getHash\n    initialRoute # fromMaybe PickUsername # navigate\n  handleAction (UsernamePickerOutput (PickUsername.UsernamePicked username)) = do\n    navigate $ Chat username\n\nnavigate :: forall m. MonadEffect m => Route -> m Unit\nnavigate = RoutingDuplex.print routeCodec >>> RoutingHash.setHash >>> Effect.liftEffect\n\nmain :: Effect Unit\nmain = do\n  HA.runHalogenAff do\n    body <- HA.awaitBody\n    halogenIO <- VDomDriver.runUI router unit body\n    void $ Effect.liftEffect $ RoutingHash.matchesWith (RoutingDuplex.parse routeCodec) \\old new ->\n      when (old /= Just new) $ Aff.launchAff_ do\n        _response <- halogenIO.query $ H.mkTell $ Navigate new\n        pure unit\n\n"
                }
              ]
            },
            {
              "type": "directory",
              "path": "${snakeName}/client/test",
              "children": [
                {
                  "type": "file",
                  "path": "${snakeName}/client/test/Main.purs",
                  "content": "module Test.Main where\n\nimport Prelude\n\nimport Effect (Effect)\nimport Effect.Class.Console (log)\n\nmain :: Effect Unit\nmain = do\n  log \"🍝\"\n  log \"You should add some tests.\"\n"
                }
              ]
            }
          ]
        },
        {
          "type": "directory",
          "path": "${snakeName}/server",
          "children": [
            {
              "type": "file",
              "path": "${snakeName}/server/.formatter.exs",
              "content": "# Used by \"mix format\"\n[\n  inputs: [\"{mix,.formatter}.exs\", \"{config,lib,test}/**/*.{ex,exs}\"]\n]\n"
            },
            {
              "type": "file",
              "path": "${snakeName}/server/.psc-ide-port",
              "content": "15174"
            },
            {
              "type": "file",
              "path": "${snakeName}/server/.skapareignore",
              "content": ".elixir_ls\n.git\n_build\n.spago\noutput\ndeps\n"
            },
            {
              "type": "file",
              "path": "${snakeName}/server/.tidyrc.json",
              "content": "{\n  \"importSort\": \"source\",\n  \"importWrap\": \"auto\",\n  \"indent\": 2,\n  \"operatorsFile\": null,\n  \"ribbon\": 1,\n  \"typeArrowPlacement\": \"first\",\n  \"unicode\": \"source\",\n  \"width\": 102\n}\n"
            },
            {
              "type": "file",
              "path": "${snakeName}/server/.tool-versions",
              "content": "erlang 25.1.2\nelixir 1.14.2-otp-25\npurescript 0.15.3\nspago 0.20.9\npurerl 0.0.17\nrebar 3.20.0\nnodejs 17.9.1\n"
            },
            {
              "type": "directory",
              "path": "${snakeName}/server/lib",
              "children": [
                {
                  "type": "file",
                  "path": "${snakeName}/server/lib/${snakeName}.ex",
                  "content": "defmodule ${pascalName} do\n  @moduledoc \"\"\"\n  Documentation for `${pascalName}`.\n  \"\"\"\n\n  @doc \"\"\"\n  Hello world.\n\n  ## Examples\n\n      iex> ${pascalName}.hello()\n      :world\n\n  \"\"\"\n  def hello do\n    :world\n  end\nend\n"
                }
              ]
            },
            {
              "type": "file",
              "path": "${snakeName}/server/mix.exs",
              "content": "defmodule ${pascalName}.MixProject do\n  use Mix.Project\n\n  def project do\n    [\n      app: :${snakeName},\n      version: \"0.1.0\",\n      elixir: \"~> 1.14\",\n      start_permanent: Mix.env() == :prod,\n      build_embedded: Mix.env() == :prod,\n      deps: deps(),\n      compilers: [:purerl | Mix.compilers()],\n      erlc_paths: [\"output\"]\n    ]\n  end\n\n  # Run \"mix help compile.app\" to learn about applications.\n  def application do\n    [\n      mod: {:${snakeName}_application@ps, []},\n      extra_applications: [:logger]\n    ]\n  end\n\n  # Run \"mix help deps\" to learn about dependencies.\n  defp deps do\n    [\n      # {:dep_from_hexpm, \"~> 0.3.0\"},\n      # {:dep_from_git, git: \"https://github.com/elixir-lang/my_dep.git\", tag: \"0.1.0\"}\n      {:purerlex, \"~> 0.4.2\"},\n      {:jsx, \"~> 3.1\"},\n      {:cowboy, \"~> 2.9.0\"},\n      {:gproc, \"~> 0.9.0\"}\n    ]\n  end\nend\n"
            },
            {
              "type": "file",
              "path": "${snakeName}/server/mix.lock",
              "content": "%{\n  \"cowboy\": {:hex, :cowboy, \"2.9.0\", \"865dd8b6607e14cf03282e10e934023a1bd8be6f6bacf921a7e2a96d800cd452\", [:make, :rebar3], [{:cowlib, \"2.11.0\", [hex: :cowlib, repo: \"hexpm\", optional: false]}, {:ranch, \"1.8.0\", [hex: :ranch, repo: \"hexpm\", optional: false]}], \"hexpm\", \"2c729f934b4e1aa149aff882f57c6372c15399a20d54f65c8d67bef583021bde\"},\n  \"cowlib\": {:hex, :cowlib, \"2.11.0\", \"0b9ff9c346629256c42ebe1eeb769a83c6cb771a6ee5960bd110ab0b9b872063\", [:make, :rebar3], [], \"hexpm\", \"2b3e9da0b21c4565751a6d4901c20d1b4cc25cbb7fd50d91d2ab6dd287bc86a9\"},\n  \"gproc\": {:hex, :gproc, \"0.9.0\", \"853ccb7805e9ada25d227a157ba966f7b34508f386a3e7e21992b1b484230699\", [:rebar3], [], \"hexpm\", \"587e8af698ccd3504cf4ba8d90f893ede2b0f58cabb8a916e2bf9321de3cf10b\"},\n  \"jsx\": {:hex, :jsx, \"3.1.0\", \"d12516baa0bb23a59bb35dccaf02a1bd08243fcbb9efe24f2d9d056ccff71268\", [:rebar3], [], \"hexpm\", \"0c5cc8fdc11b53cc25cf65ac6705ad39e54ecc56d1c22e4adb8f5a53fb9427f3\"},\n  \"purerlex\": {:hex, :purerlex, \"0.4.2\", \"96e8a6988f5b4e91e713cc5c04f5f768f46fd39539f7dc61c8182f439669c31d\", [:mix], [], \"hexpm\", \"303d02b8f29199612cacdecbd6aca7c27b9423f94d6982c6bac56bc326e24103\"},\n  \"ranch\": {:hex, :ranch, \"1.8.0\", \"8c7a100a139fd57f17327b6413e4167ac559fbc04ca7448e9be9057311597a1d\", [:make, :rebar3], [], \"hexpm\", \"49fbcfd3682fab1f5d109351b61257676da1a2fdbe295904176d5e521a2ddfe5\"},\n}\n"
            },
            {
              "type": "file",
              "path": "${snakeName}/server/packages.dhall",
              "content": "{-\nWelcome to your new Dhall package-set!\n\nBelow are instructions for how to edit this file for most use\ncases, so that you don't need to know Dhall to use it.\n\n## Use Cases\n\nMost will want to do one or both of these options:\n1. Override/Patch a package's dependency\n2. Add a package not already in the default package set\n\nThis file will continue to work whether you use one or both options.\nInstructions for each option are explained below.\n\n### Overriding/Patching a package\n\nPurpose:\n- Change a package's dependency to a newer/older release than the\n    default package set's release\n- Use your own modified version of some dependency that may\n    include new API, changed API, removed API by\n    using your custom git repo of the library rather than\n    the package set's repo\n\nSyntax:\nwhere `entityName` is one of the following:\n- dependencies\n- repo\n- version\n-------------------------------\nlet upstream = --\nin  upstream\n  with packageName.entityName = \"new value\"\n-------------------------------\n\nExample:\n-------------------------------\nlet upstream = --\nin  upstream\n  with halogen.version = \"master\"\n  with halogen.repo = \"https://example.com/path/to/git/repo.git\"\n\n  with halogen-vdom.version = \"v4.0.0\"\n  with halogen-vdom.dependencies = [ \"extra-dependency\" ] # halogen-vdom.dependencies\n-------------------------------\n\n### Additions\n\nPurpose:\n- Add packages that aren't already included in the default package set\n\nSyntax:\nwhere `<version>` is:\n- a tag (i.e. \"v4.0.0\")\n- a branch (i.e. \"master\")\n- commit hash (i.e. \"701f3e44aafb1a6459281714858fadf2c4c2a977\")\n-------------------------------\nlet upstream = --\nin  upstream\n  with new-package-name =\n    { dependencies =\n       [ \"dependency1\"\n       , \"dependency2\"\n       ]\n    , repo =\n       \"https://example.com/path/to/git/repo.git\"\n    , version =\n        \"<version>\"\n    }\n-------------------------------\n\nExample:\n-------------------------------\nlet upstream = --\nin  upstream\n  with benchotron =\n      { dependencies =\n          [ \"arrays\"\n          , \"exists\"\n          , \"profunctor\"\n          , \"strings\"\n          , \"quickcheck\"\n          , \"lcg\"\n          , \"transformers\"\n          , \"foldable-traversable\"\n          , \"exceptions\"\n          , \"node-fs\"\n          , \"node-buffer\"\n          , \"node-readline\"\n          , \"datetime\"\n          , \"now\"\n          ]\n      , repo =\n          \"https://github.com/hdgarrood/purescript-benchotron.git\"\n      , version =\n          \"v7.0.0\"\n      }\n-------------------------------\n-}\nlet upstream =\n      https://github.com/purerl/package-sets/releases/download/erl-0.15.3-20220629/packages.dhall sha256:48ee9f3558c00e234eae6b8f23b4b8b66eb9715c7f2154864e1e425042a0723b\n\nin  upstream\n  with erl-simplebus =\n      { dependencies = upstream.erl-simplebus.dependencies\n      , repo = \"https://github.com/id3as/purescript-erl-simplebus.git\"\n      , version = \"551cb2e110f70bf470825d0912c06c48e71867bc\"\n      }\n  with routing-duplex =\n      { dependencies = upstream.routing-duplex.dependencies\n      , repo = \"https://github.com/natefaubion/purescript-routing-duplex.git\"\n      , version = \"v0.7.0\"\n      }\n  with js-uri =\n     { dependencies = upstream.js-uri.dependencies\n     , repo = \"https://github.com/GoNZooo/purescript-js-uri.git\"\n     , version = \"v2.0.0-erl1-a\"\n     }\n"
            },
            {
              "type": "directory",
              "path": "${snakeName}/server/priv",
              "children": [
                {
                  "type": "directory",
                  "path": "${snakeName}/server/priv/static",
                  "children": [
                    {
                      "type": "file",
                      "path": "${snakeName}/server/priv/static/.skapareignore",
                      "content": "app.js\napp.js.map\n"
                    },
                    {
                      "type": "file",
                      "path": "${snakeName}/server/priv/static/app.css",
                      "content": "@import url(\"https://fonts.googleapis.com/css2?family=Lato:wght@400;700&display=swap\");\n*,\n::before,\n::after {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody,\nbutton {\n  font: 18px/1.5 \"Lato\";\n}\n\nbody {\n  background-color: #f5f5f5;\n  height: 100vh;\n  width: 100vw;\n}\n\n.chat-window {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 1rem;\n  background-color: #fff;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n  height: 100%;\n  width: 100%;\n}\n\n.chat-window .chat-components {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n  width: 100%;\n}\n\n.chat-window .chat-components .message-box {\n  background-color: #fff;\n  flex-grow: 2;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n  height: 100%;\n  width: 100%;\n  overflow-y: scroll;\n}\n\n.message-form {\n  width: 100%;\n}\n\n.message-form input {\n  margin-top: 1rem;\n  width: 100%;\n}\n\n.join-message {\n  color: green;\n}\n\n.leave-message {\n  color: red;\n}\n\n.rename-message {\n  color: blue;\n}\n\n.chat-user {\n  font-weight: bold;\n}\n"
                    }
                  ]
                }
              ]
            },
            {
              "type": "file",
              "path": "${snakeName}/server/spago.dhall",
              "content": "{-\nWelcome to a Spago project!\nYou can edit this file as you like.\n\nNeed help? See the following resources:\n- Spago documentation: https://github.com/purescript/spago\n- Dhall language tour: https://docs.dhall-lang.org/tutorials/Language-Tour.html\n\nWhen creating a new Spago project, you can use\n`spago init --no-comments` or `spago init -C`\nto generate this file without the comments in this block.\n-}\n{ name = \"${snakeName}\"\n, dependencies =\n  [ \"arrays\"\n  , \"bifunctors\"\n  , \"console\"\n  , \"datetime\"\n  , \"debug\"\n  , \"effect\"\n  , \"either\"\n  , \"erl-atom\"\n  , \"erl-binary\"\n  , \"erl-cowboy\"\n  , \"erl-kernel\"\n  , \"erl-lists\"\n  , \"erl-logger\"\n  , \"erl-pinto\"\n  , \"erl-process\"\n  , \"erl-simplebus\"\n  , \"erl-stetson\"\n  , \"erl-test-eunit\"\n  , \"erl-test-eunit-discovery\"\n  , \"erl-tuples\"\n  , \"exceptions\"\n  , \"foldable-traversable\"\n  , \"foreign\"\n  , \"free\"\n  , \"heterogeneous\"\n  , \"lists\"\n  , \"maybe\"\n  , \"newtype\"\n  , \"ordered-collections\"\n  , \"partial\"\n  , \"prelude\"\n  , \"record\"\n  , \"routing-duplex\"\n  , \"simple-json\"\n  , \"simple-json-generics\"\n  , \"strings\"\n  , \"transformers\"\n  , \"tuples\"\n  , \"typelevel-prelude\"\n  , \"unicode\"\n  , \"unsafe-coerce\"\n  ]\n, packages = ./packages.dhall\n, sources = [ \"src/**/*.purs\", \"test/**/*.purs\", \"../Common/**/*.purs\" ]\n, backend = \"purerl\"\n}\n"
            },
            {
              "type": "directory",
              "path": "${snakeName}/server/src",
              "children": [
                {
                  "type": "directory",
                  "path": "${snakeName}/server/src/${pascalName}",
                  "children": [
                    {
                      "type": "file",
                      "path": "${snakeName}/server/src/${pascalName}/Application.purs",
                      "content": "module ${pascalName}.Application where\n\nimport ${pascalName}.Supervisor as ${pascalName}Supervisor\nimport Effect.Uncurried (EffectFn2)\nimport Erl.Atom (Atom)\nimport Erl.Data.List as ErlList\nimport Foreign (Foreign)\nimport Pinto.App as Application\n\nstart :: forall args. EffectFn2 Atom (ErlList.List args) Foreign\nstart = Application.simpleStart ${pascalName}Supervisor.startLink\n"
                    },
                    {
                      "type": "file",
                      "path": "${snakeName}/server/src/${pascalName}/Channel.purs",
                      "content": "-- | Represents a process belonging to a single conceptual channel entity in the system. This is\n-- | subscribed to by processes that are interested in messages in that channel.\nmodule ${pascalName}.Channel\n  ( bus\n  , send\n  , subscribe\n  , unsubscribe\n  ) where\n\nimport Prelude\n\nimport ${pascalName}.Common.Types (Channel, ChannelEvent)\nimport ${pascalName}.Types (ChatProcessName(..))\nimport Effect.Class (class MonadEffect, liftEffect)\nimport Erl.Process (class HasSelf)\nimport SimpleBus (SubscriptionRef)\nimport SimpleBus as SimpleBus\n\n-- | The bus on which we can send channel events.\nbus :: Channel -> SimpleBus.Bus ChatProcessName ChannelEvent\nbus channel = SimpleBus.bus $ ChannelProcess channel\n\n-- | Subscribes a process to a channel bus. Takes a callback for turning channel events into events\n-- | that the process can handle.\nsubscribe\n  :: forall e m\n   . HasSelf m e\n  => MonadEffect m\n  => Channel\n  -> (ChannelEvent -> e)\n  -> m SubscriptionRef\nsubscribe channel f = SimpleBus.subscribe (bus channel) f\n\n-- | Unsubscribes a process from a channel bus.\nunsubscribe :: forall m. MonadEffect m => SubscriptionRef -> m Unit\nunsubscribe = SimpleBus.unsubscribe >>> liftEffect\n\n-- | Sends a channel event on the bus.\nsend :: forall m. MonadEffect m => Channel -> ChannelEvent -> m Unit\nsend channel = SimpleBus.raise (bus channel) >>> liftEffect\n"
                    },
                    {
                      "type": "file",
                      "path": "${snakeName}/server/src/${pascalName}/Supervisor.purs",
                      "content": "module ${pascalName}.Supervisor\n  ( startLink\n  ) where\n\nimport Prelude\n\nimport ${pascalName}.Web as Web\nimport Data.Maybe (Maybe(..))\nimport Data.Time.Duration (Seconds(..))\nimport Effect (Effect)\nimport Erl.Atom (atom)\nimport Erl.Data.List as ErlList\nimport Pinto.Supervisor (SupervisorPid)\nimport Pinto.Supervisor as Supervisor\nimport Pinto.Supervisor.Helpers as SupervisorHelpers\nimport Pinto.Types (RegistryName(..), StartLinkResult)\n\nstartLink :: Effect (StartLinkResult SupervisorPid)\nstartLink = Supervisor.startLink (Just $ Local $ atom \"${pascalName}.Supervisor\") $ pure supervisorSpec\n  where\n  supervisorSpec = { childSpecs, flags }\n  childSpecs = ErlList.fromFoldable\n    [ SupervisorHelpers.worker \"${pascalName}.Web\" $ Web.startLink {}\n    ]\n  flags = { strategy, intensity, period }\n  strategy = Supervisor.OneForOne\n  intensity = 3\n  period = Seconds 5.0\n\n"
                    },
                    {
                      "type": "file",
                      "path": "${snakeName}/server/src/${pascalName}/Types.purs",
                      "content": "module ${pascalName}.Types where\n\nimport Prelude\n\nimport ${pascalName}.Common.Types (Channel, User)\nimport Data.Generic.Rep (class Generic)\nimport Data.Map (Map)\nimport Data.Maybe (Maybe)\nimport Data.Newtype (class Newtype)\nimport Pinto.Timer (TimerRef)\nimport SimpleBus (SubscriptionRef)\n\ndata ChatProcessName\n  = UserProcess User\n  | ChannelProcess Channel\n\nderive instance genericChatProcessName :: Generic ChatProcessName _\nderive instance eqChatProcessName :: Eq ChatProcessName\nderive instance ordChatProcessName :: Ord ChatProcessName\n\nnewtype WebsocketState = WebsocketState WebsocketStateData\n\ntype WebsocketStateData =\n  { channels :: Map Channel SubscriptionRef\n  , user :: Maybe User\n  , userSubscriptionRef :: Maybe SubscriptionRef\n  , lastPing :: Maybe Int\n  , pingTimerRef :: Maybe TimerRef\n  }\n\nderive instance newtypeWebsocketState :: Newtype WebsocketState _\n\ninstance showWebsocketState :: Show WebsocketState where\n  show (WebsocketState { user, lastPing }) = \"WebsocketState \" <> show { user, lastPing }\n\ndata ErlangResult l r\n  = Error l\n  | Ok r\n\nerlangResult :: forall l r a. (l -> a) -> (r -> a) -> ErlangResult l r -> a\nerlangResult f _ (Error l) = f l\nerlangResult _ f (Ok r) = f r\n\nderive instance eqErlangResult :: (Eq l, Eq r) => Eq (ErlangResult l r)\nderive instance ordErlangResult :: (Ord l, Ord r) => Ord (ErlangResult l r)\nderive instance genericErlangResult :: Generic (ErlangResult l r) _\n\ninstance functorErlangResult :: Functor (ErlangResult l) where\n  map f (Ok r) = Ok (f r)\n  map _ (Error l) = Error l\n\ninstance applyErlangResult :: Apply (ErlangResult l) where\n  apply (Ok f) (Ok r) = Ok (f r)\n  apply (Error l) _ = Error l\n  apply _ (Error l) = Error l\n\ninstance applicativeErlangResult :: Applicative (ErlangResult l) where\n  pure = Ok\n\ninstance bindErlangResult :: Bind (ErlangResult l) where\n  bind (Ok r) f = f r\n  bind (Error l) _ = Error l\n\ninstance monadErlangResult :: Monad (ErlangResult l)\n\nforeign import data UnsafeStartResult :: Type\n\n"
                    },
                    {
                      "type": "file",
                      "path": "${snakeName}/server/src/${pascalName}/User.purs",
                      "content": "-- | Represents a process belonging to a single conceptual entity in the system. In reality this is\n-- | potentially multiple processes, but if there are, it's because multiple tabs/devices might be\n-- | open and we inform all of them about user events.\nmodule ${pascalName}.User\n  ( bus\n  , send\n  , subscribe\n  , unsubscribe\n  ) where\n\nimport Prelude\n\nimport ${pascalName}.Common.Types (User, UserEvent)\nimport ${pascalName}.Types (ChatProcessName(..))\nimport Effect.Class (class MonadEffect, liftEffect)\nimport Erl.Process (class HasSelf)\nimport SimpleBus (SubscriptionRef)\nimport SimpleBus as SimpleBus\n\n-- | The bus on which we can send user events.\nbus :: User -> SimpleBus.Bus ChatProcessName UserEvent\nbus user = SimpleBus.bus $ UserProcess user\n\n-- | Subscribes a process to a user bus. Takes a callback for turning user events into events that\n-- | the process can handle.\nsubscribe :: forall e m. HasSelf m e => MonadEffect m => User -> (UserEvent -> e) -> m SubscriptionRef\nsubscribe user f = SimpleBus.subscribe (bus user) f\n\n-- | Unsubscribes a process from a channel bus.\nunsubscribe :: forall m. MonadEffect m => SubscriptionRef -> m Unit\nunsubscribe = SimpleBus.unsubscribe >>> liftEffect\n\n-- | Sends a user event on the bus.\nsend :: forall m. MonadEffect m => User -> UserEvent -> m Unit\nsend user = SimpleBus.raise (bus user) >>> liftEffect\n"
                    },
                    {
                      "type": "file",
                      "path": "${snakeName}/server/src/${pascalName}/Utilities.erl",
                      "content": "-module(${snakeName}_utilities@foreign).\n\n-export([create_unsafe_start_result/1, translate_start_link_error/1]).\n\ncreate_unsafe_start_result({right, Pid}) ->\n  {ok, Pid};\ncreate_unsafe_start_result({left, Reason}) ->\n  {error, Reason}.\n\ntranslate_start_link_error({ignore}) ->\n  ignore;\ntranslate_start_link_error({alreadyStarted, Pid}) ->\n  {already_started, Pid};\ntranslate_start_link_error({failed, Reason}) ->\n  {failed, Reason}.\n\n"
                    },
                    {
                      "type": "file",
                      "path": "${snakeName}/server/src/${pascalName}/Utilities.purs",
                      "content": "module ${pascalName}.Utilities\n  ( createUnsafeStartResult\n  , StartErrorReason(..)\n  ) where\n\nimport Prelude\n\nimport ${pascalName}.Types (ErlangResult(..), UnsafeStartResult)\nimport Data.Either (either)\nimport Pinto.Supervisor (SupervisorPid)\nimport Pinto.Types (NotStartedReason, StartLinkResult)\n\ncreateUnsafeStartResult :: forall pid. StartLinkResult pid -> ErlangResult StartErrorReason pid\ncreateUnsafeStartResult = either (translate_start_link_error >>> Error) Ok\n\nforeign import create_unsafe_start_result :: StartLinkResult SupervisorPid -> UnsafeStartResult\nforeign import translate_start_link_error :: forall pid. NotStartedReason pid -> StartErrorReason\n\nforeign import data StartErrorReason :: Type\n\n"
                    },
                    {
                      "type": "file",
                      "path": "${snakeName}/server/src/${pascalName}/Web.purs",
                      "content": "module ${pascalName}.Web where\n\nimport Prelude hiding ((/))\n\nimport ${pascalName}.Channel as ChannelBus\nimport ${pascalName}.Common.Types (ChannelEvent(..), ClientMessage(..), ServerMessage(..))\nimport ${pascalName}.Types (WebsocketState(..))\nimport ${pascalName}.User as UserBus\nimport Data.Array as Array\nimport Data.Either (Either(..))\nimport Data.Foldable (traverse_)\nimport Data.Generic.Rep (class Generic)\nimport Data.Map as Map\nimport Data.Maybe (Maybe(..), fromJust)\nimport Data.Newtype (unwrap)\nimport Data.Show.Generic (genericShow)\nimport Data.Time.Duration (Milliseconds(..))\nimport Data.Traversable (for_)\nimport Effect (Effect)\nimport Effect.Class (class MonadEffect, liftEffect)\nimport Erl.Atom (atom)\nimport Erl.Cowboy.Handlers.WebSocket (Frame(..))\nimport Erl.Cowboy.Req (Req)\nimport Erl.Data.Binary.IOData (IOData)\nimport Erl.Data.Binary.IOData as IOData\nimport Erl.Data.Binary.UTF8 as Utf8Binary\nimport Erl.Data.List (nil, (:))\nimport Erl.Data.Tuple (Tuple2, tuple2)\nimport Erl.Kernel.Inet (Port(..), ip4)\nimport Erl.Process (class HasSelf)\nimport Html as H\nimport Html.Types (Html)\nimport Logger as Logger\nimport Partial.Unsafe (unsafePartial)\nimport Pinto.GenServer (InitFn, InitResult(..), ServerPid, ServerType)\nimport Pinto.GenServer as GenServer\nimport Pinto.GenServer.Helpers as GenServerHelpers\nimport Pinto.Timer (TimerRef)\nimport Pinto.Timer as Timer\nimport Pinto.Types (RegistryName(..), StartLinkResult)\nimport Routing.Duplex (RouteDuplex')\nimport Routing.Duplex as Routing\nimport Routing.Duplex.Generic as GenericDuplex\nimport Routing.Duplex.Generic.Syntax ((/))\nimport Simple.JSON as Json\nimport Stetson as Stetson\nimport Stetson.Rest as Rest\nimport Stetson.Types (RestResult, StaticAssetLocation(..), StetsonHandler, routeHandler)\nimport Stetson.WebSocket as WebSocket\nimport Unsafe.Coerce as Unsafe\n\ntype State = {}\n\ntype StartArgs = {}\n\ndata Route\n  = Index\n  | Static (Array String)\n  | Websocket\n\nderive instance genericRoute :: Generic Route _\n\ninstance showRoute :: Show Route where\n  show = genericShow\n\nserverName :: RegistryName (ServerType Unit Unit Unit State)\nserverName = \"${pascalName}.Web\" # atom # Local\n\nstartLink :: StartArgs -> Effect (StartLinkResult (ServerPid Unit Unit Unit State))\nstartLink args =\n  GenServer.startLink $ (GenServer.defaultSpec $ init args) { name = Just serverName }\n\nrestart :: Effect Unit\nrestart = GenServerHelpers.exit (Unsafe.unsafeCoerce serverName) $ atom \"brutal_kill\"\n\nroutes :: RouteDuplex' Route\nroutes =\n  ( Routing.path \"\" $ GenericDuplex.sum\n      { \"Index\": GenericDuplex.noArgs\n      , \"Static\": \"static\" / Routing.rest\n      , \"Websocket\": \"ws\" / GenericDuplex.noArgs\n      }\n  )\n\ninit :: StartArgs -> InitFn Unit Unit Unit State\ninit _args = do\n  ( Stetson.configure\n      { bindPort = Port 4200\n      , bindAddress = unsafePartial fromJust $ ip4 0 0 0 0\n      , routes = Stetson.routes2 routes\n          { \"Index\": indexHandler\n          , \"Static\": PrivDir \"${snakeName}\" \"static\"\n          , \"Websocket\": websocketHandler\n          }\n      }\n  )\n    # Stetson.startClear \"${pascalName}.Web\"\n    # liftEffect\n    # void\n  pure $ InitOk {}\n\nindexHandler :: StetsonHandler Unit Html\nindexHandler =\n  routeHandler\n    { init: \\r -> do\n        Logger.info { domain: atom \"http\" : atom \"get\" : nil, type: Logger.Trace }\n          { message: \"GET /\" }\n        Rest.initResult r indexPage\n    , allowedMethods: \\r s -> Rest.result (Array.toUnfoldable [ Stetson.GET ]) r s\n    , contentTypesProvided: \\r s -> Rest.result (htmlWriter : nil) r s\n    }\n\nwebsocketHandler :: StetsonHandler ServerMessage WebsocketState\nwebsocketHandler =\n  routeHandler\n    { init: \\r ->\n        WebSocket.initResult r $ WebsocketState\n          { channels: Map.empty\n          , user: Nothing\n          , lastPing: Nothing\n          , pingTimerRef: Nothing\n          , userSubscriptionRef: Nothing\n          }\n    , wsInit\n    , wsHandle\n    , wsInfo\n    , terminate\n    }\n  where\n  wsInit (WebsocketState state) = do\n    liftEffect $ Logger.debug { domain: atom \"ws\" : atom \"init\" : nil, type: Logger.Trace }\n      { message: \"Websocket init\" }\n    timerRef <- schedulePingMessage\n    pure $ Stetson.NoReply $ WebsocketState $ state { pingTimerRef = Just timerRef }\n\n  -- Handles messages from the client that is connected to the websocket\n  wsHandle frame (WebsocketState state@{ pingTimerRef }) = do\n    liftEffect $ traverse_ Timer.cancel pingTimerRef\n    timerRef <- schedulePingMessage\n    liftEffect $ Logger.debug { domain: atom \"websocket\" : atom \"Frame\" : nil, type: Logger.Trace }\n      { message: \"Received frame: \" <> frameToString frame }\n    handleFrame frame state timerRef\n\n  -- Like a classic `handle_info`; handles arbitrary messages sent to the process. This will be\n  -- used to react to messages that come in from subscriptions.\n  wsInfo SendPing state = do\n    liftEffect $ Logger.debug { domain: atom \"websocket\" : atom \"SendPing\" : nil, type: Logger.Trace }\n      { message: \"Sending ping\" }\n    pure $ Stetson.Reply ((PingFrame $ Utf8Binary.toBinary \"42\") : nil) state\n\n  wsInfo (ChannelMessage { event, channel }) state = do\n    liftEffect $ Logger.debug\n      { domain: atom \"websocket\" : atom \"ChannelMessage\" : nil, type: Logger.Trace }\n      { message: \"Sending channel message: \" <> show event <> \" in \" <> unwrap channel }\n    pure $ Stetson.Reply ((TextFrame $ Json.writeJSON $ ChannelMessage { event, channel }) : nil)\n      state\n\n  wsInfo message state = do\n    liftEffect $ Logger.debug { domain: atom \"websocket\" : atom \"info\" : nil, type: Logger.Trace }\n      { message: \"Received info: \" <> show message }\n    pure $ Stetson.Reply ((TextFrame $ Json.writeJSON message) : nil) state\n\n  handleFrame (TextFrame text) state timerRef = do\n    liftEffect $ Logger.debug { domain: atom \"websocket\" : atom \"text\" : nil, type: Logger.Trace }\n      { message: \"Received text: \" <> text }\n    case Json.readJSON text of\n      Left err -> do\n        liftEffect $ Logger.error\n          { domain: atom \"websocket\" : atom \"frame\" : nil, type: Logger.Trace }\n          { message: \"Failed to parse frame: \", error: err }\n        pure $ Stetson.NoReply $ WebsocketState state\n      Right (clientMessage :: ClientMessage) -> do\n        handleClientMessage clientMessage state timerRef\n  handleFrame (PingFrame binary) state timerRef =\n    pure $ Stetson.Reply ((PongFrame binary) : nil) $ WebsocketState $ state\n      { pingTimerRef = Just timerRef }\n  handleFrame (PongFrame _) state timerRef =\n    pure $ Stetson.NoReply $ WebsocketState $ state { pingTimerRef = Just timerRef }\n  handleFrame otherFrame state timerRef = do\n    liftEffect $ Logger.warning { domain: atom \"websocket\" : atom \"frame\" : nil, type: Logger.Trace }\n      { message: \"Received unknown frame: \" <> frameToString otherFrame }\n    pure $ Stetson.NoReply $ WebsocketState $ state { pingTimerRef = Just timerRef }\n\n  handleClientMessage\n    (SetUsername { user })\n    state@{ channels, user: Just oldUser, userSubscriptionRef: oldUserSubscriptionRef }\n    timerRef = do\n    liftEffect $ Logger.debug { domain: atom \"websocket\" : atom \"message\" : nil, type: Logger.Trace }\n      { message: \"Set username for existing user: \" <> show user }\n    traverse_ UserBus.unsubscribe oldUserSubscriptionRef\n    userSubscriptionRef <- UserBus.subscribe user \\event -> UserMessage { event }\n    for_ (Map.keys channels) \\c ->\n      ChannelBus.send c $ UserRenamed { oldName: oldUser, newName: user }\n    pure $ Stetson.NoReply $ WebsocketState $\n      state\n        { user = Just user\n        , userSubscriptionRef = Just userSubscriptionRef\n        , pingTimerRef = Just timerRef\n        }\n\n  handleClientMessage\n    (SetUsername { user })\n    state@{ user: Nothing, userSubscriptionRef: oldUserSubscriptionRef }\n    timerRef = do\n    liftEffect $ Logger.debug { domain: atom \"websocket\" : atom \"message\" : nil, type: Logger.Trace }\n      { message: \"Set username: \" <> show user }\n    traverse_ UserBus.unsubscribe oldUserSubscriptionRef\n    userSubscriptionRef <- UserBus.subscribe user \\event -> UserMessage { event }\n    pure $ Stetson.NoReply $ WebsocketState $\n      state\n        { user = Just user\n        , pingTimerRef = Just timerRef\n        , userSubscriptionRef = Just userSubscriptionRef\n        }\n\n  handleClientMessage (SendMessage { channel, message }) state@{ user } timerRef = do\n    liftEffect $ Logger.debug { domain: atom \"websocket\" : atom \"message\" : nil, type: Logger.Trace }\n      { message: \"Send message: \" <> message <> \" to channel: \" <> unwrap channel }\n    traverse_ (\\u -> ChannelBus.send channel $ ChannelMessageSent { channel, message, user: u }) user\n    pure $ Stetson.NoReply $ WebsocketState $ state { pingTimerRef = Just timerRef }\n\n  handleClientMessage (JoinChannel { user, channel }) state timerRef = do\n    liftEffect $ Logger.debug { domain: atom \"websocket\" : atom \"message\" : nil, type: Logger.Trace }\n      { message: \"Join channel: \" <> show channel }\n    subscriptionRef <- ChannelBus.subscribe channel \\event -> ChannelMessage { event, channel }\n    ChannelBus.send channel $ ChannelJoined { channel, user }\n    let newChannels = Map.insert channel subscriptionRef state.channels\n    pure $ Stetson.NoReply $ WebsocketState $\n      state { pingTimerRef = Just timerRef, channels = newChannels }\n\n  handleClientMessage (LeaveChannel { user, channel }) state@{ channels } timerRef = do\n    liftEffect $ Logger.debug { domain: atom \"websocket\" : atom \"message\" : nil, type: Logger.Trace }\n      { message: \"Leave channel: \" <> show channel }\n    ChannelBus.send channel $ ChannelLeft { channel, user }\n    let maybeSubscriptionRef = Map.lookup channel channels\n    traverse_ ChannelBus.unsubscribe maybeSubscriptionRef\n    let newChannels = Map.delete channel channels\n    pure $ Stetson.NoReply $ WebsocketState $\n      state { pingTimerRef = Just timerRef, channels = newChannels }\n\n  terminate _foreign _r (WebsocketState { channels, user: Just user }) = do\n    liftEffect $ Logger.debug\n      { domain: atom \"websocket\" : atom \"terminate\" : nil, type: Logger.Trace }\n      { message: \"Terminating websocket\" }\n    traverse_ (\\channel -> ChannelBus.send channel $ ChannelLeft { channel, user }) $\n      Map.keys channels\n  terminate _foreign _r (WebsocketState { user: Nothing }) = do\n    pure unit\n\nschedulePingMessage :: forall m. HasSelf m ServerMessage => MonadEffect m => m TimerRef\nschedulePingMessage = Timer.sendAfter (Milliseconds 25_000.0) SendPing\n\nframeToString :: Frame -> String\nframeToString (TextFrame s) = \"TextFrame \" <> s\nframeToString (BinaryFrame b) = \"BinaryFrame \" <> show b\nframeToString (PingFrame b) = \"PingFrame \" <> show b\nframeToString (PongFrame b) = \"PongFrame \" <> show b\n\nlayout :: Html -> Html\nlayout content =\n  H.html5 head body\n  where\n  head = H.head [ H.link { rel: \"stylesheet\", href: \"/static/app.css\" } ]\n  body = H.body {} [ H.script { src: \"/static/app.js\", async: true } [], content ]\n\nindexPage :: Html\nindexPage = layout $ H.div {} []\n\nhtmlWriter :: Tuple2 String (Req -> Html -> Effect (RestResult IOData Html))\nhtmlWriter = tuple2 \"text/html\" $ \\r s ->\n  Rest.result (IOData.fromString $ H.render s) r s\n"
                    }
                  ]
                },
                {
                  "type": "file",
                  "path": "${snakeName}/server/src/${pascalName}.purs",
                  "content": "module ${pascalName}\n  ( restartWeb\n  ) where\n\nimport Prelude\n\nimport ${pascalName}.Web as Web\nimport Effect (Effect)\n\nrestartWeb :: Effect Unit\nrestartWeb = Web.restart\n"
                },
                {
                  "type": "directory",
                  "path": "${snakeName}/server/src/Html",
                  "children": [
                    {
                      "type": "file",
                      "path": "${snakeName}/server/src/Html/AttributeRecord.purs",
                      "content": "module Html.AttributeRecord\n  ( makeAttributeValues\n  , MakeAttributeValues\n  , class AttributeRecord\n  ) where\n\nimport Data.Array as Array\nimport Data.Eq ((==))\nimport Data.Semigroup ((<>))\nimport Data.Symbol (class IsSymbol)\nimport Data.Symbol as Symbol\nimport Heterogeneous.Folding\n  ( class FoldingWithIndex\n  , class FoldlRecord\n  , class HFoldlWithIndex\n  , hfoldlWithIndex\n  )\nimport Html.ToAttributeValue (class ToAttributeValue, toAttributeValue)\nimport Html.Types (Attributes, HtmlAttribute(..))\nimport Prim.Row (class Union)\nimport Prim.RowList (class RowToList)\nimport Type.Prelude (Proxy)\n\ndata MakeAttributeValues = MakeAttributeValues\n\ninstance showAttributeValues ::\n  ( ToAttributeValue a\n  , IsSymbol symbol\n  ) =>\n  FoldingWithIndex MakeAttributeValues (Proxy symbol) Attributes a Attributes where\n  foldingWithIndex MakeAttributeValues key acc value =\n    let\n      symbolString = Symbol.reflectSymbol key\n      attributeValue = toAttributeValue value\n    in\n      if symbolString == \"data\" then\n        acc <> Array.singleton (HtmlAttribute \"\" attributeValue)\n      else\n        acc <> Array.singleton (HtmlAttribute (Symbol.reflectSymbol key) (toAttributeValue value))\n\nmakeAttributeValues\n  :: forall r\n   . HFoldlWithIndex MakeAttributeValues Attributes { | r } Attributes\n  => { | r }\n  -> Attributes\nmakeAttributeValues = hfoldlWithIndex MakeAttributeValues ([] :: Attributes)\n\nclass\n  ( Union attributes attributes' possibleValues\n  , RowToList attributes r\n  , FoldlRecord MakeAttributeValues Attributes r attributes Attributes\n  ) <=\n  AttributeRecord attributes attributes' r possibleValues\n\ninstance attributeRecord ::\n  ( Union attributes attributes' possibleValues\n  , RowToList attributes r\n  , FoldlRecord MakeAttributeValues Attributes r attributes Attributes\n  ) =>\n  AttributeRecord attributes attributes' r possibleValues\n"
                    },
                    {
                      "type": "file",
                      "path": "${snakeName}/server/src/Html/ToAttributeValue.purs",
                      "content": "module Html.ToAttributeValue\n  ( class ToAttributeValue\n  , toAttributeValue\n  ) where\n\nimport Data.Function (identity, (#))\nimport Data.Functor (map)\nimport Data.Map as Map\nimport Data.Semigroup ((<>))\nimport Data.Show (show)\nimport Data.String as String\nimport Data.Tuple (Tuple(..))\nimport Html.Types (DataMap(..))\n\nclass ToAttributeValue a where\n  toAttributeValue :: a -> String\n\ninstance toAttributeValueString :: ToAttributeValue String where\n  toAttributeValue = identity\n\ninstance toAttributeValueInt :: ToAttributeValue Int where\n  toAttributeValue = show\n\ninstance toAttributeValueBoolean :: ToAttributeValue Boolean where\n  toAttributeValue = show\n\ninstance toAttributeValueNumber :: ToAttributeValue Number where\n  toAttributeValue = show\n\ninstance toAttributeValueDataMap :: ToAttributeValue DataMap where\n  toAttributeValue (DataMap m) =\n    let\n      pairs = m # Map.toUnfoldable # map (\\(Tuple k v) -> \"data-\" <> k <> \"=\\\"\" <> v <> \"\\\"\")\n    in\n      String.joinWith \" \" pairs\n"
                    },
                    {
                      "type": "file",
                      "path": "${snakeName}/server/src/Html/Types.purs",
                      "content": "module Html.Types where\n\nimport Data.Map (Map)\n\ndata Html\n  = HtmlNode String Attributes Children\n  | HtmlText String\n  | HtmlLeaf String Attributes\n\ndata HtmlAttribute = HtmlAttribute String String\n\ntype Attributes = Array HtmlAttribute\n\ntype Children = Array Html\n\nnewtype DataMap = DataMap (Map String String)\n\n"
                    }
                  ]
                },
                {
                  "type": "file",
                  "path": "${snakeName}/server/src/Html.purs",
                  "content": "module Html where\n\nimport Prelude hiding ((+))\n\nimport Data.Foldable (fold, foldMap)\nimport Html.AttributeRecord (class AttributeRecord, makeAttributeValues)\nimport Html.Types (Children, DataMap, Html(..), HtmlAttribute(..))\n\n-- | A row type describing attributes common to all HTML elements.\ntype CommonAttributes =\n  ( accesskey :: String\n  , class :: String\n  , contenteditable :: Boolean\n  , contextmenu :: String\n  , dir :: String\n  , draggable :: Boolean\n  , dropzone :: String\n  , hidden :: Boolean\n  , id :: String\n  , lang :: String\n  , spellcheck :: Boolean\n  , style :: String\n  , tabindex :: Int\n  , title :: String\n  , translate :: String\n  , data :: DataMap\n  )\n\nhtml5 :: Html -> Html -> Html\nhtml5 head' body' = HtmlNode \"html\" [] [ head', body' ]\n\nhead :: Children -> Html\nhead children = HtmlNode \"head\" [] children\n\nbody :: forall as as' r. AttributeRecord as as' r CommonAttributes => Record as -> Children -> Html\nbody as = HtmlNode \"body\" (makeAttributeValues as)\n\ntext :: String -> Html\ntext = HtmlText\n\ntype AnchorAttributes =\n  ( download :: String\n  , href :: String\n  , hreflang :: String\n  , media :: String\n  , ping :: String\n  , rel :: String\n  , target :: String\n  , type :: String\n  | CommonAttributes\n  )\n\na :: forall as as' r. AttributeRecord as as' r AnchorAttributes => Record as -> Children -> Html\na attributes = HtmlNode \"a\" (makeAttributeValues attributes)\n\nspan :: forall as as' r. AttributeRecord as as' r CommonAttributes => Record as -> Children -> Html\nspan attributes = HtmlNode \"span\" (makeAttributeValues attributes)\n\nli :: forall as as' r. AttributeRecord as as' r CommonAttributes => Record as -> Children -> Html\nli attributes = HtmlNode \"li\" (makeAttributeValues attributes)\n\ntitle :: forall as as' r. AttributeRecord as as' r CommonAttributes => Record as -> Children -> Html\ntitle attributes = HtmlNode \"title\" (makeAttributeValues attributes)\n\nh1 :: forall as as' r. AttributeRecord as as' r CommonAttributes => Record as -> Children -> Html\nh1 attributes = HtmlNode \"h1\" (makeAttributeValues attributes)\n\nh2 :: forall as as' r. AttributeRecord as as' r CommonAttributes => Record as -> Children -> Html\nh2 attributes = HtmlNode \"h2\" (makeAttributeValues attributes)\n\nh3 :: forall as as' r. AttributeRecord as as' r CommonAttributes => Record as -> Children -> Html\nh3 attributes = HtmlNode \"h3\" (makeAttributeValues attributes)\n\nh4 :: forall as as' r. AttributeRecord as as' r CommonAttributes => Record as -> Children -> Html\nh4 attributes = HtmlNode \"h4\" (makeAttributeValues attributes)\n\nh5 :: forall as as' r. AttributeRecord as as' r CommonAttributes => Record as -> Children -> Html\nh5 attributes = HtmlNode \"h5\" (makeAttributeValues attributes)\n\nh6 :: forall as as' r. AttributeRecord as as' r CommonAttributes => Record as -> Children -> Html\nh6 attributes = HtmlNode \"h6\" (makeAttributeValues attributes)\n\np :: forall as as' r. AttributeRecord as as' r CommonAttributes => Record as -> Children -> Html\np attributes = HtmlNode \"p\" (makeAttributeValues attributes)\n\nul :: forall as as' r. AttributeRecord as as' r CommonAttributes => Record as -> Children -> Html\nul attributes = HtmlNode \"ul\" (makeAttributeValues attributes)\n\ndiv :: forall as as' r. AttributeRecord as as' r CommonAttributes => Record as -> Children -> Html\ndiv attributes = HtmlNode \"div\" (makeAttributeValues attributes)\n\ntype MetaAttributes =\n  ( property :: String\n  , content :: String\n  , charset :: String\n  , name :: String\n  , \"http-equiv\" :: String\n  )\n\nnav :: forall as as' r. AttributeRecord as as' r CommonAttributes => Record as -> Children -> Html\nnav attributes = HtmlNode \"nav\" (makeAttributeValues attributes)\n\nmeta :: forall as as' r. AttributeRecord as as' r MetaAttributes => Record as -> Html\nmeta attributes = HtmlLeaf \"meta\" (makeAttributeValues attributes)\n\ntype LinkAttributes =\n  ( crossorigin :: String\n  , href :: String\n  , hreflang :: String\n  , media :: String\n  , referrerpolicy :: String\n  , rel :: String\n  , sizes :: String\n  , title :: String\n  , type :: String\n  | CommonAttributes\n  )\n\nlink :: forall as as' r. AttributeRecord as as' r LinkAttributes => Record as -> Html\nlink attributes = HtmlLeaf \"link\" (makeAttributeValues attributes)\n\ntype SvgAttributes =\n  ( xmlns :: String\n  , \"xmlns:xlink\" :: String\n  , version :: String\n  , width :: String\n  , height :: String\n  , viewBox :: String\n  , preserveAspectRatio :: String\n  | CommonAttributes\n  )\n\nsvg :: forall as as' r. AttributeRecord as as' r SvgAttributes => Record as -> Children -> Html\nsvg attributes = HtmlNode \"svg\" (makeAttributeValues attributes)\n\ntype ScriptAttributes =\n  ( async :: Boolean\n  , charset :: String\n  , crossorigin :: String\n  , defer :: Boolean\n  , integrity :: String\n  , language :: String\n  , src :: String\n  , type :: String\n  )\n\nscript :: forall as as' r. AttributeRecord as as' r ScriptAttributes => Record as -> Children -> Html\nscript attributes = HtmlNode \"script\" (makeAttributeValues attributes)\n\nrender :: Html -> String\nrender (HtmlNode \"html\" attributes children) =\n  fold\n    [ \"<!doctype html>\"\n    , \"<html\"\n    , foldMap renderAttribute attributes\n    , \">\"\n    , foldMap render children\n    , \"</html>\"\n    ]\nrender (HtmlNode name attributes children) =\n  fold\n    [ \"<\"\n    , name\n    , \" \"\n    , foldMap renderAttribute attributes\n    , \">\"\n    , foldMap render children\n    , \"</\"\n    , name\n    , \">\"\n    ]\nrender (HtmlText text') = text'\nrender (HtmlLeaf name attributes) =\n  fold\n    [ \"<\"\n    , name\n    , \" \"\n    , foldMap renderAttribute attributes\n    , \" />\"\n    ]\n\nrenderAttribute :: HtmlAttribute -> String\nrenderAttribute (HtmlAttribute \"\" value) = value\nrenderAttribute (HtmlAttribute name' value) = name' <> \"=\\\"\" <> value <> \"\\\"\"\n\n"
                },
                {
                  "type": "directory",
                  "path": "${snakeName}/server/src/Pinto",
                  "children": [
                    {
                      "type": "directory",
                      "path": "${snakeName}/server/src/Pinto/GenServer",
                      "children": [
                        {
                          "type": "file",
                          "path": "${snakeName}/server/src/Pinto/GenServer/Helpers.erl",
                          "content": "-module(pinto_genServer_helpers@foreign).\n\n-export([exit_/2]).\n\nexit_(Name0, Reason) ->\n  Name = translate_name(Name0),\n  fun() -> gen_server:stop(Name, Reason, timer:seconds(5)) end.\n\ntranslate_name({local, Name}) ->\n  Name;\ntranslate_name(Name) ->\n  Name.\n"
                        },
                        {
                          "type": "file",
                          "path": "${snakeName}/server/src/Pinto/GenServer/Helpers.purs",
                          "content": "module Pinto.GenServer.Helpers\n  ( exit\n  ) where\n\nimport Prelude\n\nimport Effect (Effect)\nimport Erl.Atom (Atom)\nimport Erl.Process (Process)\n\nexit :: forall process. Process process -> Atom -> Effect Unit\nexit = exit_\n\nforeign import exit_ :: forall p. Process p -> Atom -> Effect Unit\n"
                        }
                      ]
                    },
                    {
                      "type": "directory",
                      "path": "${snakeName}/server/src/Pinto/Supervisor",
                      "children": [
                        {
                          "type": "file",
                          "path": "${snakeName}/server/src/Pinto/Supervisor/Helpers.purs",
                          "content": "module Pinto.Supervisor.Helpers\n  ( supervisor\n  , worker\n  ) where\n\nimport Prelude\n\nimport Data.Time.Duration (Milliseconds(..))\nimport Effect (Effect)\nimport Erl.Process.Raw (class HasPid)\nimport Pinto.Supervisor\n  ( ChildShutdownTimeoutStrategy(..)\n  , ChildType(..)\n  , ErlChildSpec\n  , RestartStrategy(..)\n  )\nimport Pinto.Supervisor as Supervisor\nimport Pinto.Types (StartLinkResult)\n\nsupervisor\n  :: forall childProcess\n   . HasPid childProcess\n  => String\n  -> Effect (StartLinkResult childProcess)\n  -> ErlChildSpec\nsupervisor id start =\n  Supervisor.spec\n    { id\n    , childType: Supervisor\n    , start\n    , restartStrategy: RestartTransient\n    , shutdownStrategy: ShutdownTimeout $ Milliseconds 5000.0\n    }\n\nworker\n  :: forall childProcess\n   . HasPid childProcess\n  => String\n  -> Effect (StartLinkResult childProcess)\n  -> ErlChildSpec\nworker id start =\n  Supervisor.spec\n    { id\n    , childType: Worker\n    , start\n    , restartStrategy: RestartTransient\n    , shutdownStrategy: ShutdownTimeout $ Milliseconds 5000.0\n    }\n"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "directory",
              "path": "${snakeName}/server/test",
              "children": [
                {
                  "type": "file",
                  "path": "${snakeName}/server/test/${snakeName}_test.exs",
                  "content": "defmodule ${pascalName}Test do\n  use ExUnit.Case\n  doctest ${pascalName}\n\n  test \"greets the world\" do\n    assert ${pascalName}.hello() == :world\n  end\nend\n"
                },
                {
                  "type": "file",
                  "path": "${snakeName}/server/test/test_helper.exs",
                  "content": "ExUnit.start()\n"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "description": "Chat application template"
}
